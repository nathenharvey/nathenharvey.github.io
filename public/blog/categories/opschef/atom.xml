<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: opschef | Nathen Harvey]]></title>
  <link href="http://www.nathenharvey.com/blog/categories/opschef/atom.xml" rel="self"/>
  <link href="http://www.nathenharvey.com/"/>
  <updated>2012-12-14T12:46:18-08:00</updated>
  <id>http://www.nathenharvey.com/</id>
  <author>
    <name><![CDATA[Nathen Harvey]]></name>
    <email><![CDATA[nathen@nathenharvey.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Chef - Part 3]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/12/14/learning-chef-part-3/"/>
    <updated>2012-12-14T12:14:00-08:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/12/14/learning-chef-part-3</id>
    <content type="html"><![CDATA[<p>Part 3 of our Learning Chef tutorial was run as a Google+ Hangout that was streamed to YouTube.</p>

<p>In Part 3, we added a bunch of cookbooks from the community site including <a href="http://ckbk.it/git">git</a>, <a href="http://ckbk.it/application">application</a>, and <a href="http://ckbk.it/application_ruby">application_ruby</a>.  After adding these cookbooks, we created a cookbook of our own to deploy a <a href="https://github.com/mulderp/chef-demo">sample Rails application</a>.</p>

<p>The application wasn't fully deployed by the end of the tutorial but we'll pick-up from there next time.</p>

<p>I'll update this post soon with a breakdown of each step we took during this session.  In the meantime, you can watch the entire video below.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/3cA1IL8DV8I" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Chef - Part 2]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/12/07/learning-chef-part-2/"/>
    <updated>2012-12-07T13:18:00-08:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/12/07/learning-chef-part-2</id>
    <content type="html"><![CDATA[<p>Part 2 of our Learning Chef tutorial was run as a Google+ Hangout that was streamed to YouTube.</p>

<h2>Review of Part 1</h2>

<ul>
<li><a href="http://nathenharvey.com/blog/2012/12/06/learning-chef-part-1/">Read the blog post for Part 1</a></li>
</ul>


<iframe width="560" height="315" src="http://www.youtube.com/embed/K_S-yxKfYek?start=35" frameborder="0" allowfullscreen></iframe>


<h2>Discuss Chef Solo vs. Chef Server</h2>

<p>Chef Solo allows you to run Chef Cookbooks without a Chef Server.  There are a number of things that you don't get when using Chef Solo.  Check the <a href="http://wiki.opscode.com/display/chef/Chef+Solo">Chef Solo page on the wiki</a> for more information.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/K_S-yxKfYek?start=344" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<p></p>

<h2>Download a number of cookbooks from the community site</h2>

<p>Now that we've got our Vagrant instance connected to Chef Server we can start managing the configuration of the VM with Chef.  We'll download a number of cookbooks from the <a href="http://community.opscode.com">Community Site</a> and extract them into our Chef repository.</p>

<p>Here are the commands we ran to download each cookbook:</p>

<ol>
<li><code>knife cookbook site download apache2</code></li>
<li><code>knife cookbook site download apt</code></li>
<li><code>knife cookbook site download build-essentials</code></li>
<li><code>knife cookbook site download mongodb</code></li>
<li><code>knife cookbook site download omnibus_updater</code></li>
<li><code>knife cookbook site download passenger_apache2</code></li>
</ol>


<p>After downloading each cookbook, extract it to the cookbooks directory of the chef-repo:</p>

<p><code>tar xzvf COOKBOOK_NAME.tar.gz -C cookbooks</code></p>

<p>Finally, upload each cookbook to the Hosted Chef server:</p>

<p><code>knife cookbook upload COOKBOOK_NAME</code></p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/K_S-yxKfYek?start=482" frameborder="0" allowfullscreen></iframe>


<h2>Update the run list for our node</h2>

<p>There are a number of ways to update a node's run list.  You can do so in a web browser while logged in to Hosted Chef or you can do so using knife.</p>

<p>In our session, we used <a href="http://www.youtube.com/watch?v=K_S-yxKfYek&amp;t=18m47s">the management interface</a> and <code>knife node edit</code> there's an even easier way with knife though:</p>

<p><code>knife node run_list add NODE_NAME RUN_LIST_ITEM</code> which we would have done as <code>knife node run_list add patrick_vm "recipe[passenger_apache2]"</code></p>

<p>Once our run list has been updated, we run <code>vagrant provision</code> to execute chef-client on our VM.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/K_S-yxKfYek?start=1885" frameborder="0" allowfullscreen></iframe>


<h2>Add port forwarding to the Vagrant instance</h2>

<p>Finally, we updated our Vagrant configuration so that port 80 on the VM is forwarded to port 8080.  This was done by adding <code>config.vm.forward_port 80, 8080</code> to our Vagrantfile.  Here's the full Vagrantfile:</p>

<p>``` ruby Vagrantfile
Vagrant::Config.run do |config|
  config.vm.box = "opscode-ubuntu-12.04"
  config.vm.box_url = "https://opscode-vm.s3.amazonaws.com/vagrant/boxes/opscode-ubuntu-12.04.box"
  config.vm.forward_port 80, 8080</p>

<p>  config.vm.provision :chef_client do |chef|</p>

<pre><code>chef.chef_server_url = "https://api.opscode.com/organizations/fidor"
chef.validation_key_path = "./.chef/fidor-validator.pem"
chef.validation_client_name = "fidor-validator"
chef.node_name = "patrick_vm"
</code></pre>

<p>  end
end
```</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/K_S-yxKfYek?start=3078" frameborder="0" allowfullscreen></iframe>


<h2>What's Next</h2>

<p>Stay tuned for our next session where we'll start exploring <a href="http://docs.opscode.com/resource.html">resources</a> and writing our own <a href="http://docs.opscode.com/essentials_cookbooks.html">cookbooks</a>.</p>

<p>In the meantime, please let us know what you think of this post and these videos!  Drop a note in the comments or reach out to <a href="https://twitter.com/nathenharvey">@nathenharvey</a> or <a href="http://twitter.com/mulpat">@mulpat</a> on twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Chef - Part 1]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/12/06/learning-chef-part-1/"/>
    <updated>2012-12-06T17:07:00-08:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/12/06/learning-chef-part-1</id>
    <content type="html"><![CDATA[<p>In November of 2012, <a href="https://twitter.com/mulpat">Patrick Mulder</a> posted a <a href="http://lists.opscode.com/sympa/arc/chef/2012-11/msg00389.html">request on the Chef mailing list</a>.  He was</p>

<p><blockquote><p>looking for some 1-1 teaching via skype to help me get going in setting up a basic DB server from scratch, as well as a basic dev server as intermediary step.</p></blockquote></p>

<p>I thought this would be an excellent opportunity to feed my recent addiction to Google+ Hangouts.  I would provide Patrick some one-on-one tutoring if he would agree to having the sessions <a href="http://www.youtube.com/watch?v=l7-nAHdplD4&amp;list=PLKK5zTDXqzFM53J6-rikDrqbbY0Pu-9SP">broadcast live on YouTube</a>.  We had some technical issues getting our first session going in a Google+ Hangout but we were able to meet via Skype and I captured video of the session.</p>

<p>Our goal is to help you get up and running on Chef by following our progress.  The intent is to have additional sessions run via Google+ Hangouts that are steamed live to YouTube.  This post includes our first session which has been broken into nine short videos.  I hope you enjoy these videos and are able to learn something about Chef, too.  Both Patrick and I are looking forward to your feedback on this experiment.</p>

<p>You can <a href="http://www.youtube.com/watch?v=l7-nAHdplD4&amp;list=PLKK5zTDXqzFM53J6-rikDrqbbY0Pu-9SP">watch all of the videos in the YouTube playlist</a> or keep reading and watch each video in turn.</p>

<h2>Introduction</h2>

<p>In this video we introduce ourselves and the project.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/l7-nAHdplD4" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>Overview of Chef</h2>

<p>In this video we visit the newly launched <a href="http://docs.opscode.com">Chef Documentation Site</a> and look over the <a href="http://docs.opscode.com/chef_overview.html">Overview of Chef</a> diagram.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/2BCNpHNZzy8" frameborder="0" allowfullscreen></iframe>


<p>For our project the Chef Workstation will be Patrick's laptop, the Chef Server will be <a href="http://www.opscode.com/hosted-chef/">Opscode Hosted Chef</a>, and the first node we create will be a virtual machine that is managed by <a href="http://vagrantup.com">Vagrant</a>.</p>

<h2>Register for Hosted Chef</h2>

<p>In this video Patrick will <a href="http://www.opscode.com/hosted-chef/">sign-up for a Hosted Chef account</a>. We will use the free trial which allows you to manage up to 5 nodes for free.  After signing-up and verifying his email address, Patrick will <a href="https://manage.opscode.com">login to Hosted Chef</a> at <a href="https://manage.opscode.com">https://manage.opscode.com</a>.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/7n_mwo9-pIA" frameborder="0" allowfullscreen></iframe>


<h2>Invite Another User to Your Chef Organization</h2>

<p>If you're not the only one managing your infrastructure, you'll want to invite you co-workers to join your Chef Organization.  Watch this video to see how to invite another user to join your Chef Organization.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/5pwVYvetEW4" frameborder="0" allowfullscreen></iframe>


<h2>Initialize a git Repository</h2>

<p>When managing your infrastructure as code, you'll want to store that code in some source code repository.  For this tutorial, we're going to use <a href="http://git-scm.com/">git</a>, a distributed version control system.  The git repository will be publicly hosted on <a href="https://github.com/mulderp/learning-chef">github</a>.</p>

<p>Your workstation will need to have Chef installed.  We verify that Patrick has already installed Chef but if you haven't installed Chef on your workstation yet, you can grab it from <a href="http://www.opscode.com/chef/install/">http://www.opscode.com/chef/install/</a>.</p>

<p>Next we create the Chef repository on the local workstation:</p>

<ol>
<li><code>git clone git@github.com:opscode/chef-repo.git</code> This will clone the file and directory structure needed to get started with Chef.  Of course, you could also just download a zip or tar.gz of the files from <a href="https://github.com/opscode/chef-repo/downloads">https://github.com/opscode/chef-repo/downloads</a>.</li>
<li><code>cd chef-repo</code> Change in to the directory that was just created.</li>
<li><code>rm -rf .git</code> Remove the git directory from the cloned repository, we're going to create our own git repo.</li>
<li><code>git init</code> - Initialize a new git repository for our infrastructure code.</li>
<li>Create a new repository on <a href="http://github.com">github.com</a> if you'd like to store your repository there.</li>
<li>Commit the initial changes and push to your repository.</li>
</ol>


<iframe width="560" height="315" src="http://www.youtube.com/embed/KdoquSLbZOI" frameborder="0" allowfullscreen></iframe>


<h2>Configure Knife</h2>

<p>The Chef server provides three files that must be in the Chef repository and are required when connecting to the Chef server. For Hosted Chef and Private Chef, log on and download the following files:</p>

<ul>
<li><code>knife.rb</code> - This configuration file can be downloaded from the <a href="https://manage.opscode.com/organizations">Organizations page</a>.</li>
<li><code>ORGANIZATION-validator.pem</code> -  This private key can be downloaded from the <a href="https://manage.opscode.com/organizations">Organizations page</a>.</li>
<li><code>USER.pem</code> - This private key an be downloaded from the <a href="https://www.opscode.com/account/password">Change Password section of the Account Management page</a>.</li>
</ul>


<p>We'll then move this files into a <code>.chef</code> directory in our chef-repo.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/6UoRTvpUIZ0" frameborder="0" allowfullscreen></iframe>


<h2>Initialize Vagrant</h2>

<p><a href="http://vagrantup.com">Vagrant</a> is a tool that makes it super easy to launch and manage virtual machines on your local workstation.  We're going to create a Vagrant-managed virtual machine to act as our Node.  Vagrant manages each virtual machine as a "box."  Opscode makes a number of Vagrant boxes available through it's <a href="https://github.com/opscode/bento">bento project on github.com</a>.</p>

<ol>
<li>Initialize Vagrant by running <code>vagrant init</code></li>
<li>Modify the <code>Vagrantfile</code> so that it contains (at least) the following:</li>
</ol>


<p><code>ruby Vagrantfile
Vagrant::Config.run do |config|
  config.vm.box = "opscode-ubuntu-12.04"
  config.vm.box_url = "https://opscode-vm.s3.amazonaws.com/vagrant/boxes/opscode-ubuntu-12.04.box"
end
</code></p>

<p>Finally, run <code>vagrant up</code> to launch the Vagrant box.</p>

<p>Be sure to check <a href="http://vagrantup.com">the Vagrant website</a> for more information about Vagrant.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/o9HtZ1nDoTI" frameborder="0" allowfullscreen></iframe>


<h2>First Converge</h2>

<p>The first time <code>vagrant up</code> is run for this box, it must download the file from Opscode's Amazon S3 file store.  This can take some time so, while it's running, you may want to expand your Vagrant file a bit more.  We'll configure Vagrant to use the <code>chef_client</code> provisioner.  You'll find more <a href="http://vagrantup.com/v1/docs/provisioners/chef_server.html">information about the chef_client provisioner on the Vagrant website</a>.</p>

<p> Here are the relevant settings in our Vagrantfile by the end of the video:</p>

<p>``` ruby Vagrantfile
Vagrant::Config.run do |config|
  config.vm.box = "opscode-ubuntu-12.04"
  config.vm.box_url = "https://opscode-vm.s3.amazonaws.com/vagrant/boxes/opscode-ubuntu-12.04.box"</p>

<p>  config.vm.provision :chef_client do |chef|</p>

<pre><code>chef.chef_server_url = "https://api.opscode.com/organizations/fidor"
chef.validation_key_path = "./.chef/fidor-validator.pem"
chef.validation_client_name = "fidor-validator"
chef.node_name = "patrick_vm"
</code></pre>

<p>  end
end
```
Be sure to check <a href="http://vagrantup.com">the Vagrant website</a> for more information about Vagrant.</p>

<h2>Checkpoint</h2>

<p>Congratulations!!  You've now got a working Chef development environment including:</p>

<ol>
<li>A free account on Opscode's Hosted Chef.</li>
<li>A workstation configured to connect to your Hosted Chef account</li>
<li>A git repository for tracking all of your infrastructure code changes</li>
<li>A Vagrant-managed virtual machine running on your local workstation</li>
<li>The virtual machine is a node managed by Chef</li>
</ol>


<iframe width="560" height="315" src="http://www.youtube.com/embed/qgPvedOKD1I" frameborder="0" allowfullscreen></iframe>


<h2>What's Next</h2>

<p>In <a href="http://nathenharvey.com/blog/2012/12/07/learning-chef-part-2/">Learning Chef - Part 2</a> we will grab some cookbooks from the <a href="http://community.opscode.com">Opscode Community Site</a> and use those to start managing our node.</p>

<p>In the meantime, please let us know what you think of this post and these videos!  Drop a note in the comments or reach out to <a href="https://twitter.com/nathenharvey">@nathenharvey</a> or <a href="http://twitter.com/mulpat">@mulpat</a> on twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVT: knife test and Travis CI]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/07/06/mvt-knife-test-and-travisci/"/>
    <updated>2012-07-06T21:26:00-07:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/07/06/mvt-knife-test-and-travisci</id>
    <content type="html"><![CDATA[<p>In my last post, <a href="http://nathenharvey.com/blog/2012/05/29/mvt-foodcritic-and-travis-ci/">MVT: Foodcritic and Travis CI</a> I described the process for having Travis CI look after your cookbooks and run Foodcritic, the cookbook lint tool, on your cookbook after each <code>git push</code>.  In this post, we'll iterate on the "Minimum Viable Test" idea by adding in support for knife's cookbook testing.</p>

<p>Wait, I'm already running foodcritic, do I really need to run <code>knife cookbook test</code>, too?</p>

<p>I'll use a very simple example to demonstrate that you do.</p>

<p>Let's create a very basic cookbook:</p>

<p><code>sh
knife cookbook create very_basic
** Creating cookbook very_basic
** Creating README for cookbook: very_basic
** Creating metadata for cookbook: very_basic
</code>
Next, we'll write a flawed recipe:</p>

<p><code>ruby cookbooks/very_basic/recipes/default.rb
package "flawed" do
  action :nothing
end
end
</code></p>

<p>Now, run foodcritic on this cookbook:</p>

<p><code>sh
foodcritic cookbooks/very_basic
</code></p>

<p>Foodcritic doesn't throw any errors or find any problem with the cookbook.</p>

<p>Let's try testing it with knife:</p>

<p><code>sh
knife cookbook test very_basic
checking very_basic
Running syntax check on very_basic
Validating ruby files
FATAL: Cookbook file recipes/default.rb has a ruby syntax error:
FATAL: /Users/nharvey/projects/chef-hosted/.chef/../cookbooks/very_basic/recipes/default.rb:22: syntax error, unexpected keyword_end, expecting $end
</code></p>

<p>OK, it should now be obvious that <code>knife cookbook test</code> should be included as part of our MVT.</p>

<!-- more -->


<p>To get Travis CI running <code>knife cookbook test</code> for us, we'll need to add or update the following files:</p>

<ul>
<li>.travis.yml</li>
<li>Rakefile</li>
<li>test/.chef/knife.rb</li>
<li>test/support/Gemfile</li>
</ul>


<p>Of course, this assumes you've configured your cookbook as described in the <a href="http://nathenharvey.com/blog/2012/05/29/mvt-foodcritic-and-travis-ci/">previous post</a>.  Let's start with the Rakefile.</p>

<p>``` ruby Rakefile</p>

<h1>!/usr/bin/env rake</h1>

<p>desc "Runs knife cookbook test"
task :knife do
  Rake::Task[:prepare_sandbox].execute</p>

<p>  sh "bundle exec knife cookbook test cookbook -c test/.chef/knife.rb  -o #{sandbox_path}/../"
end</p>

<p>task :prepare_sandbox do
  files = %w{<em>.md </em>.rb attributes definitions files libraries providers recipes resources templates}</p>

<p>  rm_rf sandbox_path
  mkdir_p sandbox_path
  cp_r Dir.glob("{#{files.join(',')}}"), sandbox_path
end</p>

<p>private
def sandbox_path
  File.join(File.dirname(<strong>FILE</strong>), %w(tmp cookbooks cookbook))
end
```</p>

<p>In the file snippet above, I've only included the parts that are relevant for getting knife working.  I'll include the full source of the Rakefile at the end of the article.</p>

<p>Next, let's add this rake task to our .travis.yml file.</p>

<p><code>ruby .travis.yml
language: ruby
gemfile:
   - test/support/Gemfile
rvm:
  - 1.9.2
  - 1.9.3
script:
  - bundle exec rake knife
</code>
To successfully run the knife command, Travis CI will need a very minimal Chef configuration.</p>

<p><code>ruby test/.chef/knife.rb
cache_type 'BasicFile'
cache_options(:path =&gt; "#{ENV['HOME']}/.chef/checksums")
</code></p>

<p>And, of course, we'll need to add Chef to our Gemfile.  Be sure to specify a modern version as Travis CI will use 0.8.10 by default (at the time of this writing).</p>

<p>``` ruby test/support/Gemfile
source "https://rubygems.org"</p>

<p>gem 'rake'
gem 'chef', '~> 10.12.0'
```</p>

<p>That's it.  On your next <code>git push</code> Travis CI should run <code>knife cookbook test</code> on your cookbook.</p>

<h2>Running locally</h2>

<p>To run the rake tasks locally, you'll need to tell bundler where the Gemfile is, or you'll need to move it to the root directory of your cookbook and update .travis.yml appropriately.  Use the following command to run your tests locally:</p>

<p><code>BUNDLE_GEMFILE=test/support/Gemfile rake knife</code>
<code>BUNDLE_GEMFILE=test/support/Gemfile rake foodcritic</code></p>

<h2>Full source code</h2>

<p>You can checkout this <a href="https://github.com/customink-webops/percona-install/compare/03b944...d423b14">Github compare view</a> to see the changes made to the code from the <a href="http://nathenharvey.com/blog/2012/05/29/mvt-foodcritic-and-travis-ci/">previous post</a>.</p>

<p><code>ruby test/.chef/knife.rb
cache_type 'BasicFile'
cache_options(:path =&gt; "#{ENV['HOME']}/.chef/checksums")
</code></p>

<p><code>ruby .travis.yml
language: ruby
gemfile:
   - test/support/Gemfile
rvm:
  - 1.9.2
  - 1.9.3
script:
  - bundle exec rake knife
  - bundle exec rake foodcritic
</code></p>

<p>The Rakefile was refactored a bit since the previous post:</p>

<p>``` ruby Rakefile</p>

<h1>!/usr/bin/env rake</h1>

<p>task :default => 'foodcritic'</p>

<p>desc "Runs foodcritic linter"
task :foodcritic do
  Rake::Task[:prepare_sandbox].execute</p>

<p>  if Gem::Version.new("1.9.2") &lt;= Gem::Version.new(RUBY_VERSION.dup)</p>

<pre><code>sh "foodcritic -f any #{sandbox_path}"
</code></pre>

<p>  else</p>

<pre><code>puts "WARN: foodcritic run is skipped as Ruby #{RUBY_VERSION} is &lt; 1.9.2."
</code></pre>

<p>  end
end</p>

<p>desc "Runs knife cookbook test"
task :knife do
  Rake::Task[:prepare_sandbox].execute</p>

<p>  sh "bundle exec knife cookbook test cookbook -c test/.chef/knife.rb -o #{sandbox_path}/../"
end</p>

<p>task :prepare_sandbox do
  files = %w{<em>.md </em>.rb attributes definitions files libraries providers recipes resources templates}</p>

<p>  rm_rf sandbox_path
  mkdir_p sandbox_path
  cp_r Dir.glob("{#{files.join(',')}}"), sandbox_path
end</p>

<p>private
def sandbox_path
  File.join(File.dirname(<strong>FILE</strong>), %w(tmp cookbooks cookbook))
end
```</p>

<p>``` ruby test/support/Gemfile
source "https://rubygems.org"</p>

<p>gem 'rake'
gem 'foodcritic'
gem 'chef', '~> 10.12.0'
```</p>

<h3>Credit</h3>

<p>A big "Thank You!" shout-out to <a href="http://twitter.com/sethvargo">Seth Vargo</a> for writing most of the code used in this post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVT:  Foodcritic and Travis CI]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/05/29/mvt-foodcritic-and-travis-ci/"/>
    <updated>2012-05-29T22:30:00-07:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/05/29/mvt-foodcritic-and-travis-ci</id>
    <content type="html"><![CDATA[<p>One of the big themes that emerged during <a href="http://chefconf.opscode.com/">#ChefConf</a> was that we should be testing our infrastructure code.  Software engineers have been practicing test-driven development, behavior-driven development, continuous integration, and many other testing-related practices for a long time.  It's becoming more important for the infrastructure engineers to learn from and apply these practices to our day-to-day workflow.  When it comes to testing Chef-driven infrastructure automation, there are a number of tools and practices that are starting to emerge.  In this article I'll look at a "minimum viable testing" (MVT) approach to this problem using <a href="http://acrmp.github.com/foodcritic/">Foodcritic</a> and <a href="http://travis-ci.org/">Travis CI</a>.  <a href="http://nathenharvey.com/blog/2012/05/29/mvt-foodcritic-and-travis-ci/#steps">Follow the steps in this article</a> to get your public cookbooks tested after every <code>git push</code>.</p>

<h3>Testing with Chef</h3>

<p>The idea of building automated tests for your infrastructure code has been getting a lot of traction lately.  When it comes to <a href="http://www.opscode.com/chef/">Chef</a>, many tools are starting to emerge.</p>

<p>The first tool in this area to get any significant traction, that I know of, was <a href="http://www.cucumber-chef.org/">cucumber-chef</a>.  I first learned of this tool when I saw a pre-release copy of <a href="http://shop.oreilly.com/product/0636920020042.do">Test-Driven Infrastructure with Chef</a> at the O'Reilly booth at <a href="http://velocityconf.com/velocity2011">Velocity Conf 2011</a>.  <a href="http://twitter.com/lordcope">Stephen Nelson-Smith</a>, the book's author and framework's lead developer, proposes an outside-in approach to testing where your tests can also act as monitors that look after the health of your infrastructure.  I like the idea of this approach and feel it makes a lot of sense in a greenfield environment.  One benefit of this approach is that it blurs the line between testing and monitoring.  You can easily hook-up your monitoring system to your cucumber tests.</p>

<p><a href="https://github.com/acrmp/chefspec">ChefSpec</a> is another tool for testing your Chef code.  It is a gem that makes it easy to write <a href="http://rspec.info/">RSpec</a> examples for Chef cookbooks.  This style of testing allows you to execute your tests without needing to converge the node that your tests are running on.  In other words, you can execute your tests without needing to provision a server.  One huge appeal to this style of testing is that the feedback loop is very small.  You'll get feedback about your cookbook changes within seconds or a very few minutes of saving your changes.</p>

<p><a href="https://github.com/calavera/minitest-chef-handler">Minitest Chef Handler</a> is yet another tool for testing with Chef.  This runs a suite of <a href="https://github.com/seattlerb/minitest">minitest</a> tests as a report handler in your Chef-managed nodes.  As you may know, report handlers are run at the end of each <a href="http://wiki.opscode.com/display/chef/Anatomy+of+a+Chef+Run">chef run, or convergence</a>.</p>

<h3>Testing at ChefConf</h3>

<p>At the inaugural <a href="http://chefconf.opscode.com">#ChefConf</a> there were many sessions that included information about many companies' approach to testing.  Here's a quick list of some of the sessions:</p>

<ul>
<li><p><a href="http://www.foodfightshow.org/2012/04/episode-10-testallthethings-testing.html">Food Fight Show Episode #10 - TESTALLTHETHINGS</a> -- This wasn't actually part of #ChefConf but is 'required listening' for anyone interested in learning more about this space.</p></li>
<li><p><a href="http://chefconf2012.sched.org/event/bfe13edac99e2b4d8582f0cd1005ee73?iframe=no&amp;w=700&amp;sidebar=no&amp;bg=no">#ChefConf Pre-event Hackday: TEST ALL THE THINGS!!!</a></p></li>
<li><p><a href="https://github.com/atomic-penguin/ntp">NTP Cookbook with tests</a> - tests were added to this cookbook as part of the hackday event.</p></li>
<li><p><a href="http://www.youtube.com/watch?v=o2e0aZUAVGw">Test-driven Development for Chef Practitioners</a> (video)</p></li>
<li><p><a href="http://www.youtube.com/watch?v=dPaYfAIvqxw">Test Driven Development Roundtable</a> (video)</p></li>
</ul>


<!--more-->


<h3>Foodcritic</h3>

<p><a href="http://acrmp.github.com/foodcritic/">Foodcritic</a> is a lint tool for your Chef cookbooks.</p>

<p><blockquote><p></p></p><p><p>Foodcritic has two goals:</p></p><p><ul><br/><li><p>To make it easier to flag problems in your Chef cookbooks that will cause Chef to blow up when you attempt to converge. This is about faster feedback. If you automate checks for common problems you can save a lot of time.</p></li><br/><li><p>To encourage discussion within the Chef community on the more subjective stuff - what does a good cookbook look like? Opscode have avoided being overly prescriptive which by and large I think is a good thing. Having a set of rules to base discussion on helps drive out what we as a community think is good style.</p></blockquote></p></li>
</ul>


<h4>Why start with Foodcritic?</h4>

<p>Given the plethora of options available, why should you start with Foodcritic?  Well, you have to start somewhere.  We felt Foodcritic was a good choice because it was easy to get started with, the tests ran quickly, and we are working under the assumption that once we started some automated testing, we'll start layering on more and more pieces as we go.  After some initial experiments, we found that we could get Foodcritic looking after our each cookbook in a matter of minutes and local tests running in seconds.</p>

<p>The pseudo-converge approaches (like ChefSpec) initially feel like we'll need to do a lot of mocking that will take some time to get correct.  The post-converge approaches (like cucumber-chef and minitest) will take longer to run and are a bit more complex.</p>

<p>One benefit of the post-converge approach is the ability to use your tests as health monitors.  We already have monitoring in place and use it as an indicator that a node is fully provisioned.  We call this "monitor-driven development."  Given that, it was better for us to get started with something that runs without requiring a full converge.  Foodcritic fit the bill quite nicely.</p>

<h3>Travis CI</h3>

<p>Travis CI is:</p>

<p><blockquote><p>A hosted continuous integration service for the open source community.</p></blockquote></p>

<p>Using Travis CI in conjunction with Foodcritic, we'd have a basic automated test foundation to build on.</p>

<h3>Automated Foodcritic tests with Travis CI <a name="steps"></a></h3>

<p>Using Foodcritic and Travis CI, you can quickly set-up a "minimum viable testing" (MVT) environment.  The idea is that once you have some sort of tests running against your cookbooks, you'll want to add more and doing so will be easy.  Let's look at how to add Foodcritic and Travis CI to your cookbook workflow.</p>

<h4>Initial set-up</h4>

<p>Follow these steps to get everything set-up and ready for your first tests:</p>

<ol>
<li><code>gem install foodcritic</code></li>
<li>Go to <a href="http://travis-ci.org/">Travis CI</a> and follow the Sign In link at the top.</li>
<li>Activate the GitHub Service Hook for your cookbook's repository from your TravisCI profile page.  Each of your cookbooks has its own repository, right?!</li>
</ol>


<h4>Configure your project</h4>

<p>The next step is to add a .travis.yml file to your project.</p>

<p><code>ruby .travis.yml
language: ruby
gemfile:
   - test/support/Gemfile
rvm:
  - 1.9.2
  - 1.9.3
script: bundle exec rake foodcritic
</code></p>

<p>This file tells Travis CI how to build your project.  We've specified the language (ruby) and the versions of ruby to use when testing this cookbook (1.9.2 and 1.9.3).  We've also specified a Gemfile and script to execute when testing this project.  Let's add a Gemfile to a new directory in our cookbook, <code>test/support</code>.</p>

<p><code>sh
mkdir -p test/support
touch test/support/Gemfile
</code></p>

<p>Our Gemfile is pretty simple, just include <code>rake</code> and <code>foodcritic</code>.</p>

<p>``` ruby Gemfile
source "https://rubygems.org"</p>

<p>gem 'rake'
gem 'foodcritic'
```</p>

<p>Finally, we'll need to add a Rake file that will be run each time Travis builds our project.</p>

<p>``` ruby Rakefile</p>

<h1>!/usr/bin/env rake</h1>

<p>desc "Runs foodcritic linter"
task :foodcritic do
  if Gem::Version.new("1.9.2") &lt;= Gem::Version.new(RUBY_VERSION.dup)</p>

<pre><code>sandbox = File.join(File.dirname(__FILE__), %w{tmp foodcritic cookbook})
prepare_foodcritic_sandbox(sandbox)

sh "foodcritic --epic-fail any #{File.dirname(sandbox)}"
</code></pre>

<p>  else</p>

<pre><code>puts "WARN: foodcritic run is skipped as Ruby #{RUBY_VERSION} is &lt; 1.9.2."
</code></pre>

<p>  end
end</p>

<p>task :default => 'foodcritic'</p>

<p>private</p>

<p>def prepare_foodcritic_sandbox(sandbox)
  files = %w{<em>.md </em>.rb attributes definitions files libraries providers
recipes resources templates}</p>

<p>  rm_rf sandbox
  mkdir_p sandbox
  cp_r Dir.glob("{#{files.join(',')}}"), sandbox
  puts "\n\n"
end</p>

<p>```</p>

<p>This Rakefile will copy the contents of our cookbook to a temporary directory and run the foodcritic tests on the temporary directory.  Note the <code>--epic-fail</code> tag is used to fail the build (return a non-zero exit code) on <code>any</code> rule that does not pass.</p>

<p>That's it!  When you push your commit to github, you should see Travis CI pick-up the changes, run your build, and report on status.</p>

<h3>Share Your Build Status</h3>

<p>One final step that you may consider is adding a build status indicator to your README.  This simple line in your README will let others know what the current build status is for your cookbook.</p>

<p>``` sh</p>

<p><a href="http://travis-ci.org/[YOUR_GITHUB_USERNAME]/[YOUR_PROJECT_NAME]"><img src="https://secure.travis-ci.org/[YOUR_GITHUB_USERNAME]/[YOUR_PROJECT_NAME].png" alt="Build Status" /></a></p>

<p>```</p>

<h3>Thanks &amp; Additional Resources</h3>

<p>A big "Thank You!" shout-out to <a href="https://twitter.com/fnichol">Fletcher Nichol</a> and <a href="https://twitter.com/atomic_penguin">Eric G. Wolfe</a> from whom I 'borrowed' the <code>Rakefile</code> and <code>.travis.yml</code> used in this post.</p>

<p>More information on Foodcritic and Travis CI can be found here:</p>

<ul>
<li><a href="http://acrmp.github.com/foodcritic/">Foodcritic</a></li>
<li><a href="http://about.travis-ci.org/docs/user/getting-started/">Travis CI: Getting started guide</a></li>
<li><a href="http://about.travis-ci.org/docs/user/status-images/">Travis CI: Status Images</a></li>
</ul>


<h3>Next Post</h3>

<p>Be sure to read the next post on this topic:  <a href="http://nathenharvey.com/blog/2012/07/06/mvt-knife-test-and-travisci/">MVT: knife test and Travis CI</a></p>
]]></content>
  </entry>
  
</feed>
