<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: opschef | Nathen Harvey]]></title>
  <link href="http://www.nathenharvey.com/blog/categories/opschef/atom.xml" rel="self"/>
  <link href="http://www.nathenharvey.com/"/>
  <updated>2012-12-06T17:45:20-05:00</updated>
  <id>http://www.nathenharvey.com/</id>
  <author>
    <name><![CDATA[Nathen Harvey]]></name>
    <email><![CDATA[nathen@nathenharvey.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MVT: knife test and Travis CI]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/07/06/mvt-knife-test-and-travisci/"/>
    <updated>2012-07-06T21:26:00-04:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/07/06/mvt-knife-test-and-travisci</id>
    <content type="html"><![CDATA[<p>In my last post, <a href="http://nathenharvey.com/blog/2012/05/29/mvt-foodcritic-and-travis-ci/">MVT: Foodcritic and Travis CI</a> I described the process for having Travis CI look after your cookbooks and run Foodcritic, the cookbook lint tool, on your cookbook after each <code>git push</code>.  In this post, we'll iterate on the "Minimum Viable Test" idea by adding in support for knife's cookbook testing.</p>

<p>Wait, I'm already running foodcritic, do I really need to run <code>knife cookbook test</code>, too?</p>

<p>I'll use a very simple example to demonstrate that you do.</p>

<p>Let's create a very basic cookbook:</p>

<p><code>sh
knife cookbook create very_basic
** Creating cookbook very_basic
** Creating README for cookbook: very_basic
** Creating metadata for cookbook: very_basic
</code>
Next, we'll write a flawed recipe:</p>

<p><code>ruby cookbooks/very_basic/recipes/default.rb
package "flawed" do
  action :nothing
end
end
</code></p>

<p>Now, run foodcritic on this cookbook:</p>

<p><code>sh
foodcritic cookbooks/very_basic
</code></p>

<p>Foodcritic doesn't throw any errors or find any problem with the cookbook.</p>

<p>Let's try testing it with knife:</p>

<p><code>sh
knife cookbook test very_basic
checking very_basic
Running syntax check on very_basic
Validating ruby files
FATAL: Cookbook file recipes/default.rb has a ruby syntax error:
FATAL: /Users/nharvey/projects/chef-hosted/.chef/../cookbooks/very_basic/recipes/default.rb:22: syntax error, unexpected keyword_end, expecting $end
</code></p>

<p>OK, it should now be obvious that <code>knife cookbook test</code> should be included as part of our MVT.</p>

<!-- more -->


<p>To get Travis CI running <code>knife cookbook test</code> for us, we'll need to add or update the following files:</p>

<ul>
<li>.travis.yml</li>
<li>Rakefile</li>
<li>test/.chef/knife.rb</li>
<li>test/support/Gemfile</li>
</ul>


<p>Of course, this assumes you've configured your cookbook as described in the <a href="http://nathenharvey.com/blog/2012/05/29/mvt-foodcritic-and-travis-ci/">previous post</a>.  Let's start with the Rakefile.</p>

<p>``` ruby Rakefile</p>

<h1>!/usr/bin/env rake</h1>

<p>desc "Runs knife cookbook test"
task :knife do
  Rake::Task[:prepare_sandbox].execute</p>

<p>  sh "bundle exec knife cookbook test cookbook -c test/.chef/knife.rb  -o #{sandbox_path}/../"
end</p>

<p>task :prepare_sandbox do
  files = %w{<em>.md </em>.rb attributes definitions files libraries providers recipes resources templates}</p>

<p>  rm_rf sandbox_path
  mkdir_p sandbox_path
  cp_r Dir.glob("{#{files.join(',')}}"), sandbox_path
end</p>

<p>private
def sandbox_path
  File.join(File.dirname(<strong>FILE</strong>), %w(tmp cookbooks cookbook))
end
```</p>

<p>In the file snippet above, I've only included the parts that are relevant for getting knife working.  I'll include the full source of the Rakefile at the end of the article.</p>

<p>Next, let's add this rake task to our .travis.yml file.</p>

<p><code>ruby .travis.yml
language: ruby
gemfile:
   - test/support/Gemfile
rvm:
  - 1.9.2
  - 1.9.3
script:
  - bundle exec rake knife
</code>
To successfully run the knife command, Travis CI will need a very minimal Chef configuration.</p>

<p><code>ruby test/.chef/knife.rb
cache_type 'BasicFile'
cache_options(:path =&gt; "#{ENV['HOME']}/.chef/checksums")
</code></p>

<p>And, of course, we'll need to add Chef to our Gemfile.  Be sure to specify a modern version as Travis CI will use 0.8.10 by default (at the time of this writing).</p>

<p>``` ruby test/support/Gemfile
source "https://rubygems.org"</p>

<p>gem 'rake'
gem 'chef', '~> 10.12.0'
```</p>

<p>That's it.  On your next <code>git push</code> Travis CI should run <code>knife cookbook test</code> on your cookbook.</p>

<h2>Running locally</h2>

<p>To run the rake tasks locally, you'll need to tell bundler where the Gemfile is, or you'll need to move it to the root directory of your cookbook and update .travis.yml appropriately.  Use the following command to run your tests locally:</p>

<p><code>BUNDLE_GEMFILE=test/support/Gemfile rake knife</code>
<code>BUNDLE_GEMFILE=test/support/Gemfile rake foodcritic</code></p>

<h2>Full source code</h2>

<p>You can checkout this <a href="https://github.com/customink-webops/percona-install/compare/03b944...d423b14">Github compare view</a> to see the changes made to the code from the <a href="http://nathenharvey.com/blog/2012/05/29/mvt-foodcritic-and-travis-ci/">previous post</a>.</p>

<p><code>ruby test/.chef/knife.rb
cache_type 'BasicFile'
cache_options(:path =&gt; "#{ENV['HOME']}/.chef/checksums")
</code></p>

<p><code>ruby .travis.yml
language: ruby
gemfile:
   - test/support/Gemfile
rvm:
  - 1.9.2
  - 1.9.3
script:
  - bundle exec rake knife
  - bundle exec rake foodcritic
</code></p>

<p>The Rakefile was refactored a bit since the previous post:</p>

<p>``` ruby Rakefile</p>

<h1>!/usr/bin/env rake</h1>

<p>task :default => 'foodcritic'</p>

<p>desc "Runs foodcritic linter"
task :foodcritic do
  Rake::Task[:prepare_sandbox].execute</p>

<p>  if Gem::Version.new("1.9.2") &lt;= Gem::Version.new(RUBY_VERSION.dup)</p>

<pre><code>sh "foodcritic -f any #{sandbox_path}"
</code></pre>

<p>  else</p>

<pre><code>puts "WARN: foodcritic run is skipped as Ruby #{RUBY_VERSION} is &lt; 1.9.2."
</code></pre>

<p>  end
end</p>

<p>desc "Runs knife cookbook test"
task :knife do
  Rake::Task[:prepare_sandbox].execute</p>

<p>  sh "bundle exec knife cookbook test cookbook -c test/.chef/knife.rb -o #{sandbox_path}/../"
end</p>

<p>task :prepare_sandbox do
  files = %w{<em>.md </em>.rb attributes definitions files libraries providers recipes resources templates}</p>

<p>  rm_rf sandbox_path
  mkdir_p sandbox_path
  cp_r Dir.glob("{#{files.join(',')}}"), sandbox_path
end</p>

<p>private
def sandbox_path
  File.join(File.dirname(<strong>FILE</strong>), %w(tmp cookbooks cookbook))
end
```</p>

<p>``` ruby test/support/Gemfile
source "https://rubygems.org"</p>

<p>gem 'rake'
gem 'foodcritic'
gem 'chef', '~> 10.12.0'
```</p>

<h3>Credit</h3>

<p>A big "Thank You!" shout-out to <a href="http://twitter.com/sethvargo">Seth Vargo</a> for writing most of the code used in this post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVT:  Foodcritic and Travis CI]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/05/29/mvt-foodcritic-and-travis-ci/"/>
    <updated>2012-05-29T22:30:00-04:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/05/29/mvt-foodcritic-and-travis-ci</id>
    <content type="html"><![CDATA[<p>One of the big themes that emerged during <a href="http://chefconf.opscode.com/">#ChefConf</a> was that we should be testing our infrastructure code.  Software engineers have been practicing test-driven development, behavior-driven development, continuous integration, and many other testing-related practices for a long time.  It's becoming more important for the infrastructure engineers to learn from and apply these practices to our day-to-day workflow.  When it comes to testing Chef-driven infrastructure automation, there are a number of tools and practices that are starting to emerge.  In this article I'll look at a "minimum viable testing" (MVT) approach to this problem using <a href="http://acrmp.github.com/foodcritic/">Foodcritic</a> and <a href="http://travis-ci.org/">Travis CI</a>.  <a href="http://nathenharvey.com/blog/2012/05/29/mvt-foodcritic-and-travis-ci/#steps">Follow the steps in this article</a> to get your public cookbooks tested after every <code>git push</code>.</p>

<h3>Testing with Chef</h3>

<p>The idea of building automated tests for your infrastructure code has been getting a lot of traction lately.  When it comes to <a href="http://www.opscode.com/chef/">Chef</a>, many tools are starting to emerge.</p>

<p>The first tool in this area to get any significant traction, that I know of, was <a href="http://www.cucumber-chef.org/">cucumber-chef</a>.  I first learned of this tool when I saw a pre-release copy of <a href="http://shop.oreilly.com/product/0636920020042.do">Test-Driven Infrastructure with Chef</a> at the O'Reilly booth at <a href="http://velocityconf.com/velocity2011">Velocity Conf 2011</a>.  <a href="http://twitter.com/lordcope">Stephen Nelson-Smith</a>, the book's author and framework's lead developer, proposes an outside-in approach to testing where your tests can also act as monitors that look after the health of your infrastructure.  I like the idea of this approach and feel it makes a lot of sense in a greenfield environment.  One benefit of this approach is that it blurs the line between testing and monitoring.  You can easily hook-up your monitoring system to your cucumber tests.</p>

<p><a href="https://github.com/acrmp/chefspec">ChefSpec</a> is another tool for testing your Chef code.  It is a gem that makes it easy to write <a href="http://rspec.info/">RSpec</a> examples for Chef cookbooks.  This style of testing allows you to execute your tests without needing to converge the node that your tests are running on.  In other words, you can execute your tests without needing to provision a server.  One huge appeal to this style of testing is that the feedback loop is very small.  You'll get feedback about your cookbook changes within seconds or a very few minutes of saving your changes.</p>

<p><a href="https://github.com/calavera/minitest-chef-handler">Minitest Chef Handler</a> is yet another tool for testing with Chef.  This runs a suite of <a href="https://github.com/seattlerb/minitest">minitest</a> tests as a report handler in your Chef-managed nodes.  As you may know, report handlers are run at the end of each <a href="http://wiki.opscode.com/display/chef/Anatomy+of+a+Chef+Run">chef run, or convergence</a>.</p>

<h3>Testing at ChefConf</h3>

<p>At the inaugural <a href="http://chefconf.opscode.com">#ChefConf</a> there were many sessions that included information about many companies' approach to testing.  Here's a quick list of some of the sessions:</p>

<ul>
<li><p><a href="http://www.foodfightshow.org/2012/04/episode-10-testallthethings-testing.html">Food Fight Show Episode #10 - TESTALLTHETHINGS</a> -- This wasn't actually part of #ChefConf but is 'required listening' for anyone interested in learning more about this space.</p></li>
<li><p><a href="http://chefconf2012.sched.org/event/bfe13edac99e2b4d8582f0cd1005ee73?iframe=no&amp;w=700&amp;sidebar=no&amp;bg=no">#ChefConf Pre-event Hackday: TEST ALL THE THINGS!!!</a></p></li>
<li><p><a href="https://github.com/atomic-penguin/ntp">NTP Cookbook with tests</a> - tests were added to this cookbook as part of the hackday event.</p></li>
<li><p><a href="http://www.youtube.com/watch?v=o2e0aZUAVGw">Test-driven Development for Chef Practitioners</a> (video)</p></li>
<li><p><a href="http://www.youtube.com/watch?v=dPaYfAIvqxw">Test Driven Development Roundtable</a> (video)</p></li>
</ul>


<!--more-->


<h3>Foodcritic</h3>

<p><a href="http://acrmp.github.com/foodcritic/">Foodcritic</a> is a lint tool for your Chef cookbooks.</p>

<p><blockquote><p></p></p><p><p>Foodcritic has two goals:</p></p><p><ul><br/><li><p>To make it easier to flag problems in your Chef cookbooks that will cause Chef to blow up when you attempt to converge. This is about faster feedback. If you automate checks for common problems you can save a lot of time.</p></li><br/><li><p>To encourage discussion within the Chef community on the more subjective stuff - what does a good cookbook look like? Opscode have avoided being overly prescriptive which by and large I think is a good thing. Having a set of rules to base discussion on helps drive out what we as a community think is good style.</p></blockquote></p></li>
</ul>


<h4>Why start with Foodcritic?</h4>

<p>Given the plethora of options available, why should you start with Foodcritic?  Well, you have to start somewhere.  We felt Foodcritic was a good choice because it was easy to get started with, the tests ran quickly, and we are working under the assumption that once we started some automated testing, we'll start layering on more and more pieces as we go.  After some initial experiments, we found that we could get Foodcritic looking after our each cookbook in a matter of minutes and local tests running in seconds.</p>

<p>The pseudo-converge approaches (like ChefSpec) initially feel like we'll need to do a lot of mocking that will take some time to get correct.  The post-converge approaches (like cucumber-chef and minitest) will take longer to run and are a bit more complex.</p>

<p>One benefit of the post-converge approach is the ability to use your tests as health monitors.  We already have monitoring in place and use it as an indicator that a node is fully provisioned.  We call this "monitor-driven development."  Given that, it was better for us to get started with something that runs without requiring a full converge.  Foodcritic fit the bill quite nicely.</p>

<h3>Travis CI</h3>

<p>Travis CI is:</p>

<p><blockquote><p>A hosted continuous integration service for the open source community.</p></blockquote></p>

<p>Using Travis CI in conjunction with Foodcritic, we'd have a basic automated test foundation to build on.</p>

<h3>Automated Foodcritic tests with Travis CI <a name="steps"></a></h3>

<p>Using Foodcritic and Travis CI, you can quickly set-up a "minimum viable testing" (MVT) environment.  The idea is that once you have some sort of tests running against your cookbooks, you'll want to add more and doing so will be easy.  Let's look at how to add Foodcritic and Travis CI to your cookbook workflow.</p>

<h4>Initial set-up</h4>

<p>Follow these steps to get everything set-up and ready for your first tests:</p>

<ol>
<li><code>gem install foodcritic</code></li>
<li>Go to <a href="http://travis-ci.org/">Travis CI</a> and follow the Sign In link at the top.</li>
<li>Activate the GitHub Service Hook for your cookbook's repository from your TravisCI profile page.  Each of your cookbooks has its own repository, right?!</li>
</ol>


<h4>Configure your project</h4>

<p>The next step is to add a .travis.yml file to your project.</p>

<p><code>ruby .travis.yml
language: ruby
gemfile:
   - test/support/Gemfile
rvm:
  - 1.9.2
  - 1.9.3
script: bundle exec rake foodcritic
</code></p>

<p>This file tells Travis CI how to build your project.  We've specified the language (ruby) and the versions of ruby to use when testing this cookbook (1.9.2 and 1.9.3).  We've also specified a Gemfile and script to execute when testing this project.  Let's add a Gemfile to a new directory in our cookbook, <code>test/support</code>.</p>

<p><code>sh
mkdir -p test/support
touch test/support/Gemfile
</code></p>

<p>Our Gemfile is pretty simple, just include <code>rake</code> and <code>foodcritic</code>.</p>

<p>``` ruby Gemfile
source "https://rubygems.org"</p>

<p>gem 'rake'
gem 'foodcritic'
```</p>

<p>Finally, we'll need to add a Rake file that will be run each time Travis builds our project.</p>

<p>``` ruby Rakefile</p>

<h1>!/usr/bin/env rake</h1>

<p>desc "Runs foodcritic linter"
task :foodcritic do
  if Gem::Version.new("1.9.2") &lt;= Gem::Version.new(RUBY_VERSION.dup)</p>

<pre><code>sandbox = File.join(File.dirname(__FILE__), %w{tmp foodcritic cookbook})
prepare_foodcritic_sandbox(sandbox)

sh "foodcritic --epic-fail any #{File.dirname(sandbox)}"
</code></pre>

<p>  else</p>

<pre><code>puts "WARN: foodcritic run is skipped as Ruby #{RUBY_VERSION} is &lt; 1.9.2."
</code></pre>

<p>  end
end</p>

<p>task :default => 'foodcritic'</p>

<p>private</p>

<p>def prepare_foodcritic_sandbox(sandbox)
  files = %w{<em>.md </em>.rb attributes definitions files libraries providers
recipes resources templates}</p>

<p>  rm_rf sandbox
  mkdir_p sandbox
  cp_r Dir.glob("{#{files.join(',')}}"), sandbox
  puts "\n\n"
end</p>

<p>```</p>

<p>This Rakefile will copy the contents of our cookbook to a temporary directory and run the foodcritic tests on the temporary directory.  Note the <code>--epic-fail</code> tag is used to fail the build (return a non-zero exit code) on <code>any</code> rule that does not pass.</p>

<p>That's it!  When you push your commit to github, you should see Travis CI pick-up the changes, run your build, and report on status.</p>

<h3>Share Your Build Status</h3>

<p>One final step that you may consider is adding a build status indicator to your README.  This simple line in your README will let others know what the current build status is for your cookbook.</p>

<p>``` sh</p>

<p><a href="http://travis-ci.org/[YOUR_GITHUB_USERNAME]/[YOUR_PROJECT_NAME]"><img src="https://secure.travis-ci.org/[YOUR_GITHUB_USERNAME]/[YOUR_PROJECT_NAME].png" alt="Build Status" /></a></p>

<p>```</p>

<h3>Thanks &amp; Additional Resources</h3>

<p>A big "Thank You!" shout-out to <a href="https://twitter.com/fnichol">Fletcher Nichol</a> and <a href="https://twitter.com/atomic_penguin">Eric G. Wolfe</a> from whom I 'borrowed' the <code>Rakefile</code> and <code>.travis.yml</code> used in this post.</p>

<p>More information on Foodcritic and Travis CI can be found here:</p>

<ul>
<li><a href="http://acrmp.github.com/foodcritic/">Foodcritic</a></li>
<li><a href="http://about.travis-ci.org/docs/user/getting-started/">Travis CI: Getting started guide</a></li>
<li><a href="http://about.travis-ci.org/docs/user/status-images/">Travis CI: Status Images</a></li>
</ul>


<h3>Next Post</h3>

<p>Be sure to read the next post on this topic:  <a href="http://nathenharvey.com/blog/2012/07/06/mvt-knife-test-and-travisci/">MVT: knife test and Travis CI</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Collaborating with Chef]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/01/13/collaborating-with-chef/"/>
    <updated>2012-01-13T16:25:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/01/13/collaborating-with-chef</id>
    <content type="html"><![CDATA[<p>This week at <a href="http://www.customink.com">CustomInk</a>, the Web Operations team was asked by the development teams to make some configuration changes on a couple of different servers.</p>

<p>They were simple changes, adding a line or two to the services.yml file for each application. The details really aren't important but let's look at how we worked together to implement the changes.</p>

<h2>Before Chef</h2>

<p>In the past, here's how the changes likely would have been implemented.</p>

<ol>
<li>Developer realizes a change is required.</li>
<li>Developer asks the ops team to make the change</li>
<li>Ops makes the update using the appropriate tools</li>
</ol>


<p>OR</p>

<ol>
<li>Developer realizes a change is required.</li>
<li>Developer considers asking the ops team to make the change but thinks better of it</li>
<li>Developer makes the change manually, Ops doesn't know, Ops can no longer provision a new server properly.</li>
</ol>


<h2>With Chef</h2>

<p>We've been using Chef for some time and have just started asking our developers to help maintain their own apps. This week, two applications needed to know about some additional external services. This required a simple update to a YAML file in each application. In both cases, I asked the developers to clone our chef repo, make the changes they needed, and submit a pull request.</p>

<p>In one instance, the simple services.yml turned into a pull request with updates to a number of nagios nrpe checks that we're running. Something that the developer didn't ask for originally but took the initiative to add while in the code.</p>

<p>Thanks to <a href="http://twitter.com/chmurph2">@chmurph2</a> and <a href="http://twitter.com/jmorton">@jmorton</a> for taking their first steps into Chef.</p>

<p>Is this a huge accomplishment? No.  But it is a great first step.</p>

<p><blockquote><p>.@nathenharvey Working together == every engineer is on the same team and you stop celebrating (or thinking about) cross-team collaboration.</p><footer><strong>@btmerr</strong> <cite><a href='https://twitter.com/#!/btmerr/status/157941260680835072'>twitter.com/#!/btmerr/status/&hellip;</a></cite></footer></blockquote></p>

<p>We've always worked as one team but continue to have some clear areas of responsibility. While I understand what Brian's saying, I'm not sure everyone doing everything makes sense. We're one team but we each have our strengths. Agree that we should stop celebrating about this a cross-team collaboration; it should be the norm.  But, we have to start somewhere and these were the first steps into the world of infrastructure as code for the developers. In my mind, that's a WIN!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Green Screen]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/01/02/deploying-green-screen/"/>
    <updated>2012-01-02T16:59:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/01/02/deploying-green-screen</id>
    <content type="html"><![CDATA[<p>In my <a href="http://nathenharvey.com/blog/2012/01/02/green-screen/">previous post</a>, I introduced <a href="https://github.com/customink/greenscreen">Green Screen</a>, a build monitoring tool that is designed to be used as a dynamic Big Visible Chart (BVC) in your work area.  It lets you add links to your build servers and displays the largest possible information on a monitor so that the team can see the build status from anywhere in the room.</p>

<p>It is easy enough to get <a href="https://github.com/customink/greenscreen">Green Screen</a> up and running on your own server or VM. The project's <a href="https://github.com/customink/greenscreen/blob/master/README.md">README</a> includes all the information you'll need for doing so. In this post, I'll describe the steps necessary to run Green Screen on Heroku or on your own server using Chef.</p>

<h2>Deploying to Heroku</h2>

<p>Deploying to <a href="http://www.heroku.com/">Heroku</a> is probably the easiest way to get up and running with Green Screen. You'll need a Heroku account but a free one should be sufficient. Check the <a href="http://devcenter.heroku.com/articles/quickstart">quick start guide</a> if you don't yet have an account.</p>

<p>Once you've got your Heroku account set-up, simply follow these steps to get your Green Screen app deployed:</p>

<ol>
<li><code>git clone git@github.com:customink/greenscreen.git</code></li>
<li><code>cd greenscreen</code></li>
<li><code>gem install heroku</code></li>
<li><code>heroku create</code></li>
<li><code>git push heroku master</code></li>
<li><code>heroku open</code></li>
</ol>


<p>If your build servers are running on the Internet, Heroku may be all that you need.</p>

<p><strong>Warning</strong> this default Green Screen looks at all of the builds currently running on <a href="http://ci.jenkins-ci.org">http://ci.jenkins-ci.org</a>.  This is fine for demo purposes but you may find it to be a bit overwhelming since it's <strong>over 300 builds</strong> at the time of this writing.</p>

<p>You can see a sample of this app running at <a href="http://greenscreenapp.com">http://greenscreenapp.com</a></p>

<!--more-->


<h2>Deploying with Chef</h2>

<p>If your build servers are not publicly accessible, Heroku won't be a great option. <a href="http://www.customink.com">CustomInk</a> has published a <a href="http://community.opscode.com/cookbooks/greenscreen">Chef cookbook</a> for setting up Green Screen on one of your nodes.</p>

<p>You simply need to include the greenscreen recipe to install, configure, and run one or more GreenScreen applications.  Or add it to your role, or directly to a node's recipes.</p>

<p><code>ruby
include_recipe "greenscreen"
</code></p>

<p>Of course, if you're just getting started with Chef, you should look at <a href="http://vagrantup.com/">Vagrant</a> which is a tool for building and distributing virtualized development environments. With Vagrant, you can quickly spin-up a VM in <a href="http://www.virtualbox.org/">VirtualBox</a> and have it use the greenscreen cookbook.</p>

<p>The cookbook allows you to specify credentials and jobs to include or ignore with each server and allows you to set-up multiple Green Screens on the same node. At CustomInk, we use different Green Screen applications for different teams.</p>

<p>Here's an excerpt from one of our Chef environment files:</p>

<p>``` ruby
"greenscreens" => [
  {</p>

<pre><code>:name =&gt; "greenscreen",
:port =&gt; "4567",
:servers =&gt; [
  {
    :url =&gt; "http://build01.customink.office:8080/cc.xml"
  },
  {
    :url =&gt; "http://build02.customink.office:8080/cc.xml",
    :username =&gt; "hudson",
    :password =&gt; "hudson_password"
  },
  {
    :url =&gt; "http://build03.customink.office:8080/cc.xml",
    :username =&gt; "hudson",
    :password =&gt; "hudson_password",
    :ignore_jobs =&gt; ["www_redirects"]
  }
]
</code></pre>

<p>  },
  {</p>

<pre><code>:name =&gt; "greenscreen.webops",
:port =&gt; "4568",
:servers =&gt; [
  {
    :url =&gt; "http://build03.customink.office:8080/cc.xml",
    :username =&gt; "hudson",
    :password =&gt; "hudson_password",
    :jobs =&gt; ["www_redirects"]
  },
  {
    :url =&gt; "http://build04.customink.office/cc.xml",
    :username =&gt; "jenkins",
    :password =&gt; "jenkis_password"
  }
]
</code></pre>

<p>  }
]
```</p>

<p>With this configuration, we have 2 Green Screens running, on ports 4567 and 4568. Both are polling build servers and showing different jobs. For instance, the server on 4567 excludes the www_redirects build (<code>:ignore_jobs =&gt; ["www_redirects"]</code>) whereas the server on 4568 only includes this build (<code>:jobs =&gt; ["www_redirects"]</code>) when polling the build03 server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why we chose Chef over Puppet at CustomInk]]></title>
    <link href="http://www.nathenharvey.com/blog/2011/11/21/why-we-chose-chef-over-puppet-at-customink/"/>
    <updated>2011-11-21T03:29:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2011/11/21/why-we-chose-chef-over-puppet-at-customink</id>
    <content type="html"><![CDATA[<p>Not unlike most technology choices, the choice of which configuration management tool to use for managing your infrastructure as code is sure to spark debate among opinionated technologists. There are certainly a number of choices available all of which have their own strengths and weaknesses. There are a number of things to consider as you select a tool.</p>

<p>Before we get into any of the specifics, I want to make it clear that the "right" answer to this question is a simple, but emphatic "yes!" Yes, you should be using a tool that allows you to manage your infrastructure as code. That tool should NOT be a server.txt file that you keep on the machine that documents the installation, set-up, and configuration changes you've made. Moving that text to somewhere other than the local server is a step in the right direction but isn't really the answer. Moving the server.txt file to your corporate wiki is going to suck just as bad.</p>

<p>I think Mark Imbriaco summed it up quite nicely in 140 characters or less:</p>

<p><blockquote><p>Pro-tip: Nobody gives a shit about your opinion of Chef vs. Puppet. Seriously. Just fucking stop it already. #usewhatworksforyou</p><footer><strong>@markimbriaco</strong> <cite><a href='https://twitter.com/markimbriaco/statuses/89180299824599041'>twitter.com/markimbriaco/&hellip;</a></cite></footer></blockquote></p>

<p>As you consider which tool is right for you, you'll need to consider a number of questions. I think of these as the WIIFs, or "what's in it for..." questions:</p>

<!--more-->


<h3>WIIFM - What's in it for me</h3>

<p>You're going to want a tool that you're happy working with. You're going to make an investment in this tool. You'll need to learn to be proficient with the tool, master it, and use it in your everyday workflow. Pick something that you'll be happy working with for some time.</p>

<h3>WIIFC - What's in it for my customers</h3>

<p>It's highly unlikely that your customers know or care anything about how your infrastructure was built, provisioned, and managed. Why should they have any say about which tool you pick? Your customers are keenly interested in the services or products you offer. They also care about things like performance, availability, and how quickly you recover from an issue or outage. If they don't care about these things, they'll likely not be your customers for long. As you grow your business, you'll want to have more time for delivering value to customers. Spend less time building, provisioning, upgrading, and repairing your infrastructure.</p>

<h3>WIIFB - What's in it for my business</h3>

<p>You may be the only one who has to build and manage the infrastructure in your company but it's likely you'll eventually move beyond a technology team of one. As your technology team grows, you'll want to include everyone in the process of managing your infrastructure. This includes the people you might not think of as typically having a say in the infrastructure: developers, quality assurance engineers, etc. You do not want to be the only person in your company who knows how to manage the infrastructure and use the tools you've selected. Sure, it gives you a false sense of job security and feeds into your hero-complex but you need to be able to pass the on-call baton to someone else. Cost may also be a factor to consider when selecting a solution although it's likely it's more of a data-point than selection criteria, given the solutions that are on the market.</p>

<p>I cannot tell you which tool is right for you. There are many factors including the ones I've listed above. I have some experience with both Puppet and Chef. At <a href="http://www.customink.com">CustomInk</a>, we decided to switch to Chef after using Puppet for about two years.</p>

<h2>Why did we switch?</h2>

<h3>We're a Rails shop</h3>

<p>CustomInk is a Ruby on Rails shop and has been for many years. Being a Rails shop helped push us towards Chef in two ways. As a Rails shop, we suffer a bit from from the stereotypical "newer and shinier is better" syndrome that many people feel ails the Rails community. As a Rails shop, the domain-specific language (DSL) of Chef is a more comfortable way for us to work. Everyone on the technology team can easily understand the code.</p>

<h3>We started with Puppet</h3>

<p>We started with Puppet so, naturally, that's the one we switched from. Puppet was, and actually still is, working well for us. However, we found that working in Puppet was going a bit slower than we'd like. Also, as we started learning more about Chef we started to see how we'd be able to quickly benefit from some of the features it offers. To be fair, we were comparing the Puppet we were using (0.24.x) to the latest (at the time) version of Chef (0.9.x). There may well have been ways to do the things we wanted with Puppet but we weren't. Chef was intriguing and it looked like we'd be able to get more from it. Instead of working to refactor our Puppet and get smarter with how to use it, we went with Chef.</p>

<h3>Search</h3>

<p>Chef's ability to search our environment and use that information at run time is very appealing. The ability for us to define a database.yml template that can have the "host" value populated at runtime based on which host is currently the primary database server is great. Using search in our capistrano recipes to determine where the code should be deployed is a huge win.</p>

<h3>Knife</h3>

<p>Knife is Chef's powerful command line interface. There are many things you can do with knife, most of which fall outside of the scope of this article. Knife allows you to interact with your entire infrastructure and Chef code base. Use knife to bootstrap a server, build the scaffolding for a new cookbook, or apply a role to a set of nodes in your environment. You can use knife ssh to execute commands on any number of nodes in your environment. knife ssh + search is a very powerful combination. "Run this command on all nodes with role X."</p>

<h3>Dependency Management</h3>

<p>We found that defining dependencies in Puppet was overly verbose and cumbersome. With Chef, order matters and we could rest assured that dependencies would be met if we specified them in the proper order.</p>

<h3>Strong Community</h3>

<p>OpsCode has done a great job of keeping up a strong community. The community.opscode.com site, where hundreds of cookbooks are shared, is a great way to get started. OpsCode has also hosted numerous webinars, publishes all of their training material, and makes it very easy to contribute patches. Frankly, I don't have any experience with this in the Puppet world. However, my lack of experience with this in the Puppet world is likely attributed simply to the way my development habits have changed over time. At CustomInk, we've been able to submit patches to chef, a number of cookbooks, and have also published some of our own cookbooks.</p>

<h3>Developer Happiness</h3>

<p>As I mentioned previously, the DSL with Chef is much more comfortable than that of Puppet. The mental model and workflow suit us. I find that the time I spend working in Chef is when I feel most productive and happy.</p>

<p>I often wonder if the reason Chef is the right tool is because it's the second one we've used. Coming to infrastructure as code includes a learning curve. I feel that we're better Chef developers because we learned from our experience with Puppet. Some may even agree that Chef's a better tool because the developers of Chef learned from their experience with Puppet.</p>

<h3>A note for projects that are just getting started</h3>

<p>If your project is just getting started, the best choice for you is probably not to use any of the configuration management tools that allow you to manage your infrastructure as code. You should stay focused exclusively on delivering value to your customers. It's likely that the best solution for you is <a href="http://www.heroku.com/">Heroku</a>. Sure, Heroku puts some constraints on how you build your app, but they're a good way for you to think creatively. You can, and should, delay your choice of tools until you're ready to spin up your first server.</p>

<h2>TL;DR</h2>

<ul>
<li>If the question is "Chef or Puppet?", the answer is "Yes." You need to manage you infrastructure as code</li>
<li>Search, knife, dependency management, community, and developer happiness were the key reasons we switched</li>
<li>Chef is the right tool for us and it might be the right one for you</li>
<li>If you're new to the idea of "Infrastructure as Code", understand that there's a learning curve but your efforts will be rewarded</li>
</ul>


<p>Did you have to make a similar choice? What were some of the deciding factors? Which tool or framework did you end up with?</p>

<hr />

<p>This was originally posted on my <a href="http://nathenharvey.blogspot.com/2011/11/why-we-chose-puppet-over-chef-at.html">blogger site</a>.</p>
]]></content>
  </entry>
  
</feed>
