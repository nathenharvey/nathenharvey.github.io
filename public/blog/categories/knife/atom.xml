<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: knife | Nathen Harvey]]></title>
  <link href="http://www.nathenharvey.com/blog/categories/knife/atom.xml" rel="self"/>
  <link href="http://www.nathenharvey.com/"/>
  <updated>2013-01-12T16:17:15-05:00</updated>
  <id>http://www.nathenharvey.com/</id>
  <author>
    <name><![CDATA[Nathen Harvey]]></name>
    <email><![CDATA[nathen@nathenharvey.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Chef - Part 4]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/12/19/learning-chef-part-4/"/>
    <updated>2012-12-19T13:53:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/12/19/learning-chef-part-4</id>
    <content type="html"><![CDATA[<h2>Learning Chef Series</h2>

<ul>
<li><a href="http://nathenharvey.com/blog/2012/12/06/learning-chef-part-1/">Part 1</a> - Introduce the project, configure workstation, and register a node with hosted Chef</li>
<li><a href="http://nathenharvey.com/blog/2012/12/07/learning-chef-part-2/">Part 2</a> - Download cookbooks from the community site, add MongoDB, Apache, and Passenger to our node</li>
<li><a href="http://nathenharvey.com/blog/2012/12/14/learning-chef-part-3/">Part 3</a> - Start writing a cookbook to deploy our application</li>
<li><a href="http://nathenharvey.com/blog/2012/12/19/learning-chef-part-4/">Part 4</a> - Finish the application deploy, introduce roles</li>
</ul>


<p>Part 4 of our Learning Chef tutorial was run as a Google+ Hangout that was streamed to YouTube.</p>

<p>In Part 4, we completed the application deploy and then looked at <a href="http://docs.opscode.com/essentials_roles.html">roles</a>.</p>

<p>I'll update this post soon with a breakdown of each step we took during this session.  In the meantime, you can watch the entire video below.</p>

<p>Also, you can grab the code from the following repositories on github:</p>

<ul>
<li><a href="http://github.com/mulderp/learning-chef">Chef Repository</a></li>
<li><a href="http://github.com/mulderp/chef-demo">Rails Application</a></li>
</ul>


<iframe width="560" height="315" src="http://www.youtube.com/embed/fb4DJJmhUt8" frameborder="0" allowfullscreen></iframe>


<h2>What's Next</h2>

<p>In Learning Chef - Part 5 we will move the MongoDB to it's own VM.</p>

<p>In the meantime, please let us know what you think of this post and these videos!  Drop a note in the comments or reach out to <a href="https://twitter.com/nathenharvey">@nathenharvey</a> or <a href="http://twitter.com/mulpat">@mulpat</a> on twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Chef - Part 3]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/12/14/learning-chef-part-3/"/>
    <updated>2012-12-14T12:14:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/12/14/learning-chef-part-3</id>
    <content type="html"><![CDATA[<h2>Learning Chef Series</h2>

<ul>
<li><a href="http://nathenharvey.com/blog/2012/12/06/learning-chef-part-1/">Part 1</a> - Introduce the project, configure workstation, and register a node with hosted Chef</li>
<li><a href="http://nathenharvey.com/blog/2012/12/07/learning-chef-part-2/">Part 2</a> - Download cookbooks from the community site, add MongoDB, Apache, and Passenger to our node</li>
<li><a href="http://nathenharvey.com/blog/2012/12/14/learning-chef-part-3/">Part 3</a> - Start writing a cookbook to deploy our application</li>
<li><a href="http://nathenharvey.com/blog/2012/12/19/learning-chef-part-4/">Part 4</a> - Finish the application deploy, introduce roles</li>
</ul>


<p>Part 3 of our Learning Chef tutorial was run as a Google+ Hangout that was streamed to YouTube.</p>

<p>In Part 3, we added a bunch of cookbooks from the community site including <a href="http://ckbk.it/git">git</a>, <a href="http://ckbk.it/application">application</a>, and <a href="http://ckbk.it/application_ruby">application_ruby</a>.  After adding these cookbooks, we created a cookbook of our own to deploy a <a href="https://github.com/mulderp/chef-demo">sample Rails application</a>.</p>

<p>The application wasn't fully deployed by the end of the tutorial but we'll pick-up from there next time.</p>

<p>I'll update this post soon with a breakdown of each step we took during this session.  In the meantime, you can watch the entire video below.</p>

<p>Also, you can grab the code from the following repositories on github:</p>

<ul>
<li><a href="http://github.com/mulderp/learning-chef">Chef Repository</a></li>
<li><a href="http://github.com/mulderp/chef-demo">Rails Application</a></li>
</ul>


<iframe width="560" height="315" src="http://www.youtube.com/embed/3cA1IL8DV8I" frameborder="0" allowfullscreen></iframe>


<h2>What's Next</h2>

<p>In <a href="http://nathenharvey.com/blog/2012/12/19/learning-chef-part-4/">Learning Chef - Part 4</a> we finish the deployment of the sample application and then explore roles.</p>

<p>In the meantime, please let us know what you think of this post and these videos!  Drop a note in the comments or reach out to <a href="https://twitter.com/nathenharvey">@nathenharvey</a> or <a href="http://twitter.com/mulpat">@mulpat</a> on twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Chef - Part 2]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/12/07/learning-chef-part-2/"/>
    <updated>2012-12-07T13:18:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/12/07/learning-chef-part-2</id>
    <content type="html"><![CDATA[<h2>Learning Chef Series</h2>

<ul>
<li><a href="http://nathenharvey.com/blog/2012/12/06/learning-chef-part-1/">Part 1</a> - Introduce the project, configure workstation, and register a node with hosted Chef</li>
<li><a href="http://nathenharvey.com/blog/2012/12/07/learning-chef-part-2/">Part 2</a> - Download cookbooks from the community site, add MongoDB, Apache, and Passenger to our node</li>
<li><a href="http://nathenharvey.com/blog/2012/12/14/learning-chef-part-3/">Part 3</a> - Start writing a cookbook to deploy our application</li>
<li><a href="http://nathenharvey.com/blog/2012/12/19/learning-chef-part-4/">Part 4</a> - Finish the application deploy, introduce roles</li>
</ul>


<p>Part 2 of our Learning Chef tutorial was run as a Google+ Hangout that was streamed to YouTube.</p>

<h2>Review of Part 1</h2>

<ul>
<li><a href="http://nathenharvey.com/blog/2012/12/06/learning-chef-part-1/">Read the blog post for Part 1</a></li>
</ul>


<iframe width="420" height="315" src="http://www.youtube.com/embed/E4ibkS1LbPk" frameborder="0" allowfullscreen></iframe>


<h2>Discuss Chef Solo vs. Chef Server</h2>

<p>Chef Solo allows you to run Chef Cookbooks without a Chef Server.  There are a number of things that you don't get when using Chef Solo.  Check the <a href="http://wiki.opscode.com/display/chef/Chef+Solo">Chef Solo page on the wiki</a> for more information.</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/QwiPbEXhe24" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<p></p>

<h2>Download a number of cookbooks from the community site</h2>

<p>Now that we've got our Vagrant instance connected to Chef Server we can start managing the configuration of the VM with Chef.  We'll download a number of cookbooks from the <a href="http://community.opscode.com">Community Site</a> and extract them into our Chef repository.</p>

<p>Here are the commands we ran to download each cookbook:</p>

<ol>
<li><code>knife cookbook site download omnibus_updater</code></li>
<li><code>knife cookbook site download apache2</code></li>
<li><code>knife cookbook site download apt</code></li>
<li><code>knife cookbook site download build-essential</code></li>
<li><code>knife cookbook site download mongodb</code></li>
<li><code>knife cookbook site download omnibus_updater</code></li>
<li><code>knife cookbook site download passenger_apache2</code></li>
</ol>


<p>After downloading each cookbook, extract it to the cookbooks directory of the chef-repo:</p>

<p><code>tar xzvf COOKBOOK_NAME.tar.gz -C cookbooks</code></p>

<p>Finally, upload each cookbook to the Hosted Chef server:</p>

<p><code>knife cookbook upload COOKBOOK_NAME</code></p>

<p>This video shows the process for grabbing the <code>omnibus_updater</code> cookbook off of the <a href="http://community.opscode.com">community site</a>.</p>

<ol>
<li><code>knife cookbook site download omnibus_updater</code></li>
<li><code>tar xzvf omnibus_updater-0.0.5.tar.gz -C cookbooks</code></li>
<li><code>knife cookbook upload omnibus_updater</code></li>
</ol>


<iframe width="560" height="315" src="http://www.youtube.com/embed/d1npGSBgyrs" frameborder="0" allowfullscreen></iframe>


<p>This video shows the process for grabbing the <code>mongodb</code> cookbook, and it's dependency, the <code>apt</code> cookbook, off of the community site.</p>

<ol>
<li><code>knife cookbook site download mongodb</code></li>
<li><code>knife cookbook site download apt</code></li>
<li><code>tar xzvf mongodb-0.11.0.tar.gz -C cookbooks</code></li>
<li><code>tar xzvf apt-1.5.0.tar.gz -C cookbooks</code></li>
<li><code>knife cookbook upload apt</code></li>
<li><code>knife cookbook upload mongodb</code></li>
</ol>


<iframe width="420" height="315" src="http://www.youtube.com/embed/wyLtF261a6A" frameborder="0" allowfullscreen></iframe>


<h2>Update the run list for our node</h2>

<p>There are a number of ways to update a node's run list.  You can do so in a web browser while logged in to Hosted Chef or you can do so using knife.</p>

<p>In our session, we first used the Opscode Chef management interface.</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/Q0BgCLSqJJU" frameborder="0" allowfullscreen></iframe>


<p>You can also update your node's run list using knife.  In this video, we'll use knife to add mongodb to the node's run list.</p>

<ol>
<li><code>export EDITOR=vim</code> - knife uses the <code>EDITOR</code> environment variable to determine which application to launch when you edit the node.</li>
<li>Add <code>"recipe[mongodb]"</code> to the <code>run_list</code></li>
<li>Run <code>chef-client</code> on the node using the <code>vagrant provision</code> command.</li>
</ol>


<iframe width="420" height="315" src="http://www.youtube.com/embed/5xU3A-SvdJc" frameborder="0" allowfullscreen></iframe>


<p>We'll follow the same steps to add <code>passenger_apache2</code> to our run list.</p>

<ol>
<li><code>knife cookbook site download passenger_apache2</code></li>
<li><code>tar xzvf passenger_apache2-1.0.0.tar.gz -C cookbooks</code></li>
<li><code>knife cookbook site download apache2</code></li>
<li><code>tar xzvf apache2-1.3.2.tar.gz -C cookbooks</code></li>
<li><code>knife cookbook upload apache2</code></li>
<li><code>knife cookbook site download build-essential</code></li>
<li><code>tar xzvf build-essential-1.2.0.tar.gz -C cookbooks</code></li>
<li><code>knife cookbook upload build-essential</code></li>
<li><code>knife cookbook upload passenger_apache2</code></li>
</ol>


<p>We will then add <code>passenger_apache2</code> to the run list using <code>knife node edit patrick_vm</code>.  When we run <code>vagrant provision</code>, we'll hit an error that requires us to add <code>apt</code> to the run list prior to <code>passenger_apache2</code>.</p>

<p>By the end of this video, the run list should look like:</p>

<p>```
"run_list" : [</p>

<pre><code>"recipe[apt]",
"recipe[omnibus_updater]",
"recipe[mongodb]",
"recipe[passenger_apache2]"
</code></pre>

<p>]
```</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/0-Bid-eiJHY" frameborder="0" allowfullscreen></iframe>


<h2>Add port forwarding to the Vagrant instance</h2>

<p>Finally, we updated the Vagrant configuration so that port 80 on the VM is forwarded to port 8080.  This was done by adding <code>config.vm.forward_port 80, 8080</code> to our Vagrantfile.  Here's the full Vagrantfile:</p>

<p>``` ruby Vagrantfile
Vagrant::Config.run do |config|
  config.vm.box = "opscode-ubuntu-12.04"
  config.vm.box_url = "https://opscode-vm.s3.amazonaws.com/vagrant/boxes/opscode-ubuntu-12.04.box"
  config.vm.forward_port 80, 8080</p>

<p>  config.vm.provision :chef_client do |chef|</p>

<pre><code>chef.chef_server_url = "https://api.opscode.com/organizations/fidor"
chef.validation_key_path = "./.chef/fidor-validator.pem"
chef.validation_client_name = "fidor-validator"
chef.node_name = "patrick_vm"
</code></pre>

<p>  end
end
```</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/ag0w_IqkgBI" frameborder="0" allowfullscreen></iframe>


<h2>Summarizing Part 2</h2>

<p>We now have the following in place:</p>

<ul>
<li>A node managed by Chef - our Vagrant VM</li>
<li>The latest version of Chef (10.16.2) is running on the node</li>
<li>Six cookbooks added to our local workstation</li>
<li>Six cookbooks added to our Hosted Chef organization</li>
<li>The run list for our node was updated</li>
<li>The node has a working MongoDB database running</li>
<li>The node has Apache and Passenger running</li>
<li>Port Forwarding is configured on the Vagrant VM</li>
</ul>


<iframe width="420" height="315" src="http://www.youtube.com/embed/7Cxfv40w7wQ" frameborder="0" allowfullscreen></iframe>


<h2>What's Next</h2>

<p>In <a href="http://nathenharvey.com/blog/2012/12/14/learning-chef-part-3/">Learning Chef - Part 3</a> we install some more cookbooks and start writing our own cookbook to deploy a sample Rails application.</p>

<p>In the meantime, please let us know what you think of this post and these videos!  Drop a note in the comments or reach out to <a href="https://twitter.com/nathenharvey">@nathenharvey</a> or <a href="http://twitter.com/mulpat">@mulpat</a> on twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Chef - Part 1]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/12/06/learning-chef-part-1/"/>
    <updated>2012-12-06T17:07:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/12/06/learning-chef-part-1</id>
    <content type="html"><![CDATA[<h2>Learning Chef Series</h2>

<ul>
<li><a href="http://nathenharvey.com/blog/2012/12/06/learning-chef-part-1/">Part 1</a> - Introduce the project, configure workstation, and register a node with hosted Chef</li>
<li><a href="http://nathenharvey.com/blog/2012/12/07/learning-chef-part-2/">Part 2</a> - Download cookbooks from the community site, add MongoDB, Apache, and Passenger to our node</li>
<li><a href="http://nathenharvey.com/blog/2012/12/14/learning-chef-part-3/">Part 3</a> - Start writing a cookbook to deploy our application</li>
<li><a href="http://nathenharvey.com/blog/2012/12/19/learning-chef-part-4/">Part 4</a> - Finish the application deploy, introduce roles</li>
</ul>


<p>In November of 2012, <a href="https://twitter.com/mulpat">Patrick Mulder</a> posted a <a href="http://lists.opscode.com/sympa/arc/chef/2012-11/msg00389.html">request on the Chef mailing list</a>.  He was</p>

<p><blockquote><p>looking for some 1-1 teaching via skype to help me get going in setting up a basic DB server from scratch, as well as a basic dev server as intermediary step.</p></blockquote></p>

<p>I thought this would be an excellent opportunity to feed my recent addiction to Google+ Hangouts.  I would provide Patrick some one-on-one tutoring if he would agree to having the sessions <a href="http://www.youtube.com/watch?v=l7-nAHdplD4&amp;list=PLKK5zTDXqzFM53J6-rikDrqbbY0Pu-9SP">broadcast live on YouTube</a>.  We had some technical issues getting our first session going in a Google+ Hangout but we were able to meet via Skype and I captured video of the session.</p>

<p>Our goal is to help you get up and running on Chef by following our progress.  The intent is to have additional sessions run via Google+ Hangouts that are steamed live to YouTube.  This post includes our first session which has been broken into nine short videos.  I hope you enjoy these videos and are able to learn something about Chef, too.  Both Patrick and I are looking forward to your feedback on this experiment.</p>

<p>You can <a href="http://www.youtube.com/watch?v=l7-nAHdplD4&amp;list=PLKK5zTDXqzFM53J6-rikDrqbbY0Pu-9SP">watch all of the videos in the YouTube playlist</a> or keep reading and watch each video in turn.</p>

<h2>Introduction</h2>

<p>In this video we introduce ourselves and the project.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/l7-nAHdplD4" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>Overview of Chef</h2>

<p>In this video we visit the newly launched <a href="http://docs.opscode.com">Chef Documentation Site</a> and look over the <a href="http://docs.opscode.com/chef_overview.html">Overview of Chef</a> diagram.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/2BCNpHNZzy8" frameborder="0" allowfullscreen></iframe>


<p>For our project the Chef Workstation will be Patrick's laptop, the Chef Server will be <a href="http://www.opscode.com/hosted-chef/">Opscode Hosted Chef</a>, and the first node we create will be a virtual machine that is managed by <a href="http://vagrantup.com">Vagrant</a>.</p>

<h2>Register for Hosted Chef</h2>

<p>In this video Patrick will <a href="http://www.opscode.com/hosted-chef/">sign-up for a Hosted Chef account</a>. We will use the free trial which allows you to manage up to 5 nodes for free.  After signing-up and verifying his email address, Patrick will <a href="https://manage.opscode.com">login to Hosted Chef</a> at <a href="https://manage.opscode.com">https://manage.opscode.com</a>.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/7n_mwo9-pIA" frameborder="0" allowfullscreen></iframe>


<h2>Invite Another User to Your Chef Organization</h2>

<p>If you're not the only one managing your infrastructure, you'll want to invite you co-workers to join your Chef Organization.  Watch this video to see how to invite another user to join your Chef Organization.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/5pwVYvetEW4" frameborder="0" allowfullscreen></iframe>


<h2>Initialize a git Repository</h2>

<p>When managing your infrastructure as code, you'll want to store that code in some source code repository.  For this tutorial, we're going to use <a href="http://git-scm.com/">git</a>, a distributed version control system.  The git repository will be publicly hosted on <a href="https://github.com/mulderp/learning-chef">github</a>.</p>

<p>Your workstation will need to have Chef installed.  We verify that Patrick has already installed Chef but if you haven't installed Chef on your workstation yet, you can grab it from <a href="http://www.opscode.com/chef/install/">http://www.opscode.com/chef/install/</a>.</p>

<p>Next we create the Chef repository on the local workstation:</p>

<ol>
<li><code>git clone git@github.com:opscode/chef-repo.git</code> This will clone the file and directory structure needed to get started with Chef.  Of course, you could also just download a zip or tar.gz of the files from <a href="https://github.com/opscode/chef-repo/downloads">https://github.com/opscode/chef-repo/downloads</a>.</li>
<li><code>cd chef-repo</code> Change in to the directory that was just created.</li>
<li><code>rm -rf .git</code> Remove the git directory from the cloned repository, we're going to create our own git repo.</li>
<li><code>git init</code> - Initialize a new git repository for our infrastructure code.</li>
<li>Create a new repository on <a href="http://github.com">github.com</a> if you'd like to store your repository there.</li>
<li>Commit the initial changes and push to your repository.</li>
</ol>


<iframe width="560" height="315" src="http://www.youtube.com/embed/KdoquSLbZOI" frameborder="0" allowfullscreen></iframe>


<h2>Configure Knife</h2>

<p>The Chef server provides three files that must be in the Chef repository and are required when connecting to the Chef server. For Hosted Chef and Private Chef, log on and download the following files:</p>

<ul>
<li><code>knife.rb</code> - This configuration file can be downloaded from the <a href="https://manage.opscode.com/organizations">Organizations page</a>.</li>
<li><code>ORGANIZATION-validator.pem</code> -  This private key can be downloaded from the <a href="https://manage.opscode.com/organizations">Organizations page</a>.</li>
<li><code>USER.pem</code> - This private key an be downloaded from the <a href="https://www.opscode.com/account/password">Change Password section of the Account Management page</a>.</li>
</ul>


<p>We'll then move this files into a <code>.chef</code> directory in our chef-repo.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/6UoRTvpUIZ0" frameborder="0" allowfullscreen></iframe>


<h2>Initialize Vagrant</h2>

<p><a href="http://vagrantup.com">Vagrant</a> is a tool that makes it super easy to launch and manage virtual machines on your local workstation.  We're going to create a Vagrant-managed virtual machine to act as our Node.  Vagrant manages each virtual machine as a "box."  Opscode makes a number of Vagrant boxes available through it's <a href="https://github.com/opscode/bento">bento project on github.com</a>.</p>

<ol>
<li>Initialize Vagrant by running <code>vagrant init</code></li>
<li>Modify the <code>Vagrantfile</code> so that it contains (at least) the following:</li>
</ol>


<p><code>ruby Vagrantfile
Vagrant::Config.run do |config|
  config.vm.box = "opscode-ubuntu-12.04"
  config.vm.box_url = "https://opscode-vm.s3.amazonaws.com/vagrant/boxes/opscode-ubuntu-12.04.box"
end
</code></p>

<p>Finally, run <code>vagrant up</code> to launch the Vagrant box.</p>

<p>Be sure to check <a href="http://vagrantup.com">the Vagrant website</a> for more information about Vagrant.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/o9HtZ1nDoTI" frameborder="0" allowfullscreen></iframe>


<h2>First Converge</h2>

<p>The first time <code>vagrant up</code> is run for this box, it must download the file from Opscode's Amazon S3 file store.  This can take some time so, while it's running, you may want to expand your Vagrant file a bit more.  We'll configure Vagrant to use the <code>chef_client</code> provisioner.  You'll find more <a href="http://vagrantup.com/v1/docs/provisioners/chef_server.html">information about the chef_client provisioner on the Vagrant website</a>.</p>

<p> Here are the relevant settings in our Vagrantfile by the end of the video:</p>

<p>``` ruby Vagrantfile
Vagrant::Config.run do |config|
  config.vm.box = "opscode-ubuntu-12.04"
  config.vm.box_url = "https://opscode-vm.s3.amazonaws.com/vagrant/boxes/opscode-ubuntu-12.04.box"</p>

<p>  config.vm.provision :chef_client do |chef|</p>

<pre><code>chef.chef_server_url = "https://api.opscode.com/organizations/fidor"
chef.validation_key_path = "./.chef/fidor-validator.pem"
chef.validation_client_name = "fidor-validator"
chef.node_name = "patrick_vm"
</code></pre>

<p>  end
end
```
Be sure to check <a href="http://vagrantup.com">the Vagrant website</a> for more information about Vagrant.</p>

<h2>Checkpoint</h2>

<p>Congratulations!!  You've now got a working Chef development environment including:</p>

<ol>
<li>A free account on Opscode's Hosted Chef.</li>
<li>A workstation configured to connect to your Hosted Chef account</li>
<li>A git repository for tracking all of your infrastructure code changes</li>
<li>A Vagrant-managed virtual machine running on your local workstation</li>
<li>The virtual machine is a node managed by Chef</li>
</ol>


<iframe width="560" height="315" src="http://www.youtube.com/embed/qgPvedOKD1I" frameborder="0" allowfullscreen></iframe>


<h2>What's Next</h2>

<p>In <a href="http://nathenharvey.com/blog/2012/12/07/learning-chef-part-2/">Learning Chef - Part 2</a> we will grab some cookbooks from the <a href="http://community.opscode.com">Opscode Community Site</a> and use those to start managing our node.</p>

<p>In the meantime, please let us know what you think of this post and these videos!  Drop a note in the comments or reach out to <a href="https://twitter.com/nathenharvey">@nathenharvey</a> or <a href="http://twitter.com/mulpat">@mulpat</a> on twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVT: knife test and Travis CI]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/07/06/mvt-knife-test-and-travisci/"/>
    <updated>2012-07-06T21:26:00-04:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/07/06/mvt-knife-test-and-travisci</id>
    <content type="html"><![CDATA[<p>In my last post, <a href="http://nathenharvey.com/blog/2012/05/29/mvt-foodcritic-and-travis-ci/">MVT: Foodcritic and Travis CI</a> I described the process for having Travis CI look after your cookbooks and run Foodcritic, the cookbook lint tool, on your cookbook after each <code>git push</code>.  In this post, we'll iterate on the "Minimum Viable Test" idea by adding in support for knife's cookbook testing.</p>

<p>Wait, I'm already running foodcritic, do I really need to run <code>knife cookbook test</code>, too?</p>

<p>I'll use a very simple example to demonstrate that you do.</p>

<p>Let's create a very basic cookbook:</p>

<p><code>sh
knife cookbook create very_basic
** Creating cookbook very_basic
** Creating README for cookbook: very_basic
** Creating metadata for cookbook: very_basic
</code>
Next, we'll write a flawed recipe:</p>

<p><code>ruby cookbooks/very_basic/recipes/default.rb
package "flawed" do
  action :nothing
end
end
</code></p>

<p>Now, run foodcritic on this cookbook:</p>

<p><code>sh
foodcritic cookbooks/very_basic
</code></p>

<p>Foodcritic doesn't throw any errors or find any problem with the cookbook.</p>

<p>Let's try testing it with knife:</p>

<p><code>sh
knife cookbook test very_basic
checking very_basic
Running syntax check on very_basic
Validating ruby files
FATAL: Cookbook file recipes/default.rb has a ruby syntax error:
FATAL: /Users/nharvey/projects/chef-hosted/.chef/../cookbooks/very_basic/recipes/default.rb:22: syntax error, unexpected keyword_end, expecting $end
</code></p>

<p>OK, it should now be obvious that <code>knife cookbook test</code> should be included as part of our MVT.</p>

<!-- more -->


<p>To get Travis CI running <code>knife cookbook test</code> for us, we'll need to add or update the following files:</p>

<ul>
<li>.travis.yml</li>
<li>Rakefile</li>
<li>test/.chef/knife.rb</li>
<li>test/support/Gemfile</li>
</ul>


<p>Of course, this assumes you've configured your cookbook as described in the <a href="http://nathenharvey.com/blog/2012/05/29/mvt-foodcritic-and-travis-ci/">previous post</a>.  Let's start with the Rakefile.</p>

<p>``` ruby Rakefile</p>

<h1>!/usr/bin/env rake</h1>

<p>desc "Runs knife cookbook test"
task :knife do
  Rake::Task[:prepare_sandbox].execute</p>

<p>  sh "bundle exec knife cookbook test cookbook -c test/.chef/knife.rb  -o #{sandbox_path}/../"
end</p>

<p>task :prepare_sandbox do
  files = %w{<em>.md </em>.rb attributes definitions files libraries providers recipes resources templates}</p>

<p>  rm_rf sandbox_path
  mkdir_p sandbox_path
  cp_r Dir.glob("{#{files.join(',')}}"), sandbox_path
end</p>

<p>private
def sandbox_path
  File.join(File.dirname(<strong>FILE</strong>), %w(tmp cookbooks cookbook))
end
```</p>

<p>In the file snippet above, I've only included the parts that are relevant for getting knife working.  I'll include the full source of the Rakefile at the end of the article.</p>

<p>Next, let's add this rake task to our .travis.yml file.</p>

<p><code>ruby .travis.yml
language: ruby
gemfile:
   - test/support/Gemfile
rvm:
  - 1.9.2
  - 1.9.3
script:
  - bundle exec rake knife
</code>
To successfully run the knife command, Travis CI will need a very minimal Chef configuration.</p>

<p><code>ruby test/.chef/knife.rb
cache_type 'BasicFile'
cache_options(:path =&gt; "#{ENV['HOME']}/.chef/checksums")
</code></p>

<p>And, of course, we'll need to add Chef to our Gemfile.  Be sure to specify a modern version as Travis CI will use 0.8.10 by default (at the time of this writing).</p>

<p>``` ruby test/support/Gemfile
source "https://rubygems.org"</p>

<p>gem 'rake'
gem 'chef', '~> 10.12.0'
```</p>

<p>That's it.  On your next <code>git push</code> Travis CI should run <code>knife cookbook test</code> on your cookbook.</p>

<h2>Running locally</h2>

<p>To run the rake tasks locally, you'll need to tell bundler where the Gemfile is, or you'll need to move it to the root directory of your cookbook and update .travis.yml appropriately.  Use the following command to run your tests locally:</p>

<p><code>BUNDLE_GEMFILE=test/support/Gemfile rake knife</code>
<code>BUNDLE_GEMFILE=test/support/Gemfile rake foodcritic</code></p>

<h2>Full source code</h2>

<p>You can checkout this <a href="https://github.com/customink-webops/percona-install/compare/03b944...d423b14">Github compare view</a> to see the changes made to the code from the <a href="http://nathenharvey.com/blog/2012/05/29/mvt-foodcritic-and-travis-ci/">previous post</a>.</p>

<p><code>ruby test/.chef/knife.rb
cache_type 'BasicFile'
cache_options(:path =&gt; "#{ENV['HOME']}/.chef/checksums")
</code></p>

<p><code>ruby .travis.yml
language: ruby
gemfile:
   - test/support/Gemfile
rvm:
  - 1.9.2
  - 1.9.3
script:
  - bundle exec rake knife
  - bundle exec rake foodcritic
</code></p>

<p>The Rakefile was refactored a bit since the previous post:</p>

<p>``` ruby Rakefile</p>

<h1>!/usr/bin/env rake</h1>

<p>task :default => 'foodcritic'</p>

<p>desc "Runs foodcritic linter"
task :foodcritic do
  Rake::Task[:prepare_sandbox].execute</p>

<p>  if Gem::Version.new("1.9.2") &lt;= Gem::Version.new(RUBY_VERSION.dup)</p>

<pre><code>sh "foodcritic -f any #{sandbox_path}"
</code></pre>

<p>  else</p>

<pre><code>puts "WARN: foodcritic run is skipped as Ruby #{RUBY_VERSION} is &lt; 1.9.2."
</code></pre>

<p>  end
end</p>

<p>desc "Runs knife cookbook test"
task :knife do
  Rake::Task[:prepare_sandbox].execute</p>

<p>  sh "bundle exec knife cookbook test cookbook -c test/.chef/knife.rb -o #{sandbox_path}/../"
end</p>

<p>task :prepare_sandbox do
  files = %w{<em>.md </em>.rb attributes definitions files libraries providers recipes resources templates}</p>

<p>  rm_rf sandbox_path
  mkdir_p sandbox_path
  cp_r Dir.glob("{#{files.join(',')}}"), sandbox_path
end</p>

<p>private
def sandbox_path
  File.join(File.dirname(<strong>FILE</strong>), %w(tmp cookbooks cookbook))
end
```</p>

<p>``` ruby test/support/Gemfile
source "https://rubygems.org"</p>

<p>gem 'rake'
gem 'foodcritic'
gem 'chef', '~> 10.12.0'
```</p>

<h3>Credit</h3>

<p>A big "Thank You!" shout-out to <a href="http://twitter.com/sethvargo">Seth Vargo</a> for writing most of the code used in this post!</p>
]]></content>
  </entry>
  
</feed>
