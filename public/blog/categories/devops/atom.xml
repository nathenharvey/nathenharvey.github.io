<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | Nathen Harvey]]></title>
  <link href="http://www.nathenharvey.com/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://www.nathenharvey.com/"/>
  <updated>2012-01-02T17:35:41-05:00</updated>
  <id>http://www.nathenharvey.com/</id>
  <author>
    <name><![CDATA[Nathen Harvey]]></name>
    <email><![CDATA[nathen@nathenharvey.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploying Green Screen]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/01/02/deploying-green-screen/"/>
    <updated>2012-01-02T16:59:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/01/02/deploying-green-screen</id>
    <content type="html"><![CDATA[<p>In my <a href="http://nathenharvey.com/blog/2012/01/02/green-screen/">previous post</a>, I introduced <a href="https://github.com/customink/greenscreen">Green Screen</a>, a build monitoring tool that is designed to be used as a dynamic Big Visible Chart (BVC) in your work area.  It lets you add links to your build servers and displays the largest possible information on a monitor so that the team can see the build status from anywhere in the room.</p>

<p>It is easy enough to get <a href="https://github.com/customink/greenscreen">Green Screen</a> up and running on your own server or VM. The project's <a href="https://github.com/customink/greenscreen/blob/master/README.md">README</a> includes all the information you'll need for doing so. In this post, I'll describe the steps necessary to run Green Screen on Heroku or on your own server using Chef.</p>

<h2>Deploying to Heroku</h2>

<p>Deploying to <a href="http://www.heroku.com/">Heroku</a> is probably the easiest way to get up and running with Green Screen. You'll need a Heroku account but a free one should be sufficient. Check the <a href="http://devcenter.heroku.com/articles/quickstart">quick start guide</a> if you don't yet have an account.</p>

<p>Once you've got your Heroku account set-up, simply follow these steps to get your Green Screen app deployed:</p>

<ol>
<li><code>git clone git@github.com:customink/greenscreen.git</code></li>
<li><code>cd greenscreen</code></li>
<li><code>gem install heroku</code></li>
<li><code>heroku create</code></li>
<li><code>git push heroku master</code></li>
<li><code>heroku open</code></li>
</ol>


<p>If your build servers are running on the Internet, Heroku may be all that you need.</p>

<p><strong>Warning</strong> this default Green Screen looks at all of the builds currently running on <a href="http://ci.jenkins-ci.org">http://ci.jenkins-ci.org</a>.  This is fine for demo purposes but you may find it to be a bit overwhelming since it's <strong>over 300 builds</strong> at the time of this writing.</p>

<p>You can see a sample of this app running at <a href="http://greenscreenapp.com">http://greenscreenapp.com</a></p>

<!--more-->


<h2>Deploying with Chef</h2>

<p>If your build servers are not publicly accessible, Heroku won't be a great option. <a href="http://www.customink.com">CustomInk</a> has published a <a href="http://community.opscode.com/cookbooks/greenscreen">Chef cookbook</a> for setting up Green Screen on one of your nodes.</p>

<p>You simply need to include the greenscreen recipe to install, configure, and run one or more GreenScreen applications.  Or add it to your role, or directly to a node's recipes.</p>

<p><code>ruby
include_recipe "greenscreen"
</code></p>

<p>Of course, if you're just getting started with Chef, you should look at <a href="http://vagrantup.com/">Vagrant</a> which is a tool for building and distributing virtualized development environments. With Vagrant, you can quickly spin-up a VM in <a href="http://www.virtualbox.org/">VirtualBox</a> and have it use the greenscreen cookbook.</p>

<p>The cookbook allows you to specify credentials and jobs to include or ignore with each server and allows you to set-up multiple Green Screens on the same node. At CustomInk, we use different Green Screen applications for different teams.</p>

<p>Here's an excerpt from one of our Chef environment files:</p>

<p>``` ruby
"greenscreens" => [
  {</p>

<pre><code>:name =&gt; "greenscreen",
:port =&gt; "4567",
:servers =&gt; [
  {
    :url =&gt; "http://build01.customink.office:8080/cc.xml"
  },
  {
    :url =&gt; "http://build02.customink.office:8080/cc.xml",
    :username =&gt; "hudson",
    :password =&gt; "hudson_password"
  },
  {
    :url =&gt; "http://build03.customink.office:8080/cc.xml",
    :username =&gt; "hudson",
    :password =&gt; "hudson_password",
    :ignore_jobs =&gt; ["www_redirects"]
  }
]
</code></pre>

<p>  },
  {</p>

<pre><code>:name =&gt; "greenscreen.webops",
:port =&gt; "4568",
:servers =&gt; [
  {
    :url =&gt; "http://build03.customink.office:8080/cc.xml",
    :username =&gt; "hudson",
    :password =&gt; "hudson_password",
    :jobs =&gt; ["www_redirects"]
  },
  {
    :url =&gt; "http://build04.customink.office/cc.xml",
    :username =&gt; "jenkins",
    :password =&gt; "jenkis_password"
  }
]
</code></pre>

<p>  }
]
```</p>

<p>With this configuration, we have 2 Green Screens running, on ports 4567 and 4568. Both are polling build servers and showing different jobs. For instance, the server on 4567 excludes the www_redirects build (<code>:ignore_jobs =&gt; ["www_redirects"]</code>) whereas the server on 4568 only includes this build (<code>:jobs =&gt; ["www_redirects"]</code>) when polling the build03 server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Green Screen]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/01/02/green-screen/"/>
    <updated>2012-01-02T14:17:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/01/02/green-screen</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/customink/greenscreen">Green Screen</a> is a build monitoring tool that is designed to be used as a dynamic Big Visible Chart (BVC) in your work area. It lets you add links to your build servers and displays the largest possible information on a monitor so that the team can see the build status from anywhere in the room.</p>

<p><img class="right" src="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/greenscreen.jpg" width="300" height="225" title="Green Screen Monitor" alt="Green Screen Monitor">
We use Green Screen at <a href="http://www.customink.com">CustomInk</a> to look after our continuous integration servers, currently 3 Hudson servers and one Jenkins cluster. We have a monitor mounted in the engineering office that makes it easy for everyone to quickly assess the build status.</p>

<p>Green Screen is a simple Sinatra application that is <a href="http://nathenharvey.com/blog/2012/01/02/deploying-green-screen">easy to configure and deploy</a>.  It works well with any continuous integration server that conforms to the <a href="http://confluence.public.thoughtworks.org/display/CI/Multiple+Project+Summary+Reporting+Standard">multiple project summary reporting standard</a>.</p>

<p>You can see a sample Green Screen app running at <a href="http://greenscreenapp.com">http://greenscreenapp.com</a>.  Be forewarned, this sample Green Screen looks at all of the builds currently running on <a href="http://ci.jenkins-ci.org">http://ci.jenkins-ci.org</a>.  This is fine for demo purposes but you may find it to be a bit overwhelming since it's <strong>over 300 builds</strong> at the time of this writing.</p>

<!--more-->


<h2>History</h2>

<p>Green Screen was originally implemented by <a href="https://github.com/martinjandrews">Marty Andrews</a> and <a href="http://blog.martyandrews.net/2009/08/greenscreen-build-monitor-bvc.html">announced on his blog in 2009</a>. In the original version, a build that was in progress would blink on the screen.
<a href="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4565_building.jpg"><img class="center" src="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4565_building.jpg" width="208" height="145" title="martinjandrews Green Screen" alt="martinjandrews Green Screen"></a></p>

<p><a href="https://github.com/rsutphin">Rhett Sutphin</a> improved the layout of green screen and introduced a new color, yellow, for builds that are in progress.
<a href="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4566-building.jpg"><img class="center" src="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4566-building.jpg" width="207" height="145" title="rsutphin Green Screen" alt="rsutphin Green Screen"></a></p>

<p>After using these versions for a while at CustomInk, we decided that the most important thing to know was which builds were failing. Once you get past a handful of builds, it's no longer very interesting to see every build. We forked Rhett's version and created a <a href="https://github.com/customink/greenscreen">new layout for Green Screen</a>.</p>

<p>If everything is passing, the screen is basically one giant checkmark.</p>

<p><a href="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/green.jpg"><img class="center" src="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/green.jpg" width="210" height="119" title="customink Green Screen" alt="customink Green Screen"></a></p>

<p>If there are any failing builds, they're shown in the main area while all others are displayed on the right.</p>

<p><a href="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4567.jpg"><img class="center" src="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4567.jpg" width="210" height="121" title="customink failed build" alt="customink failed build"></a></p>

<p>Finally, a build that previously failed will be shown in yellow while it's rebuilding.</p>

<p><a href="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4567_building.jpg"><img class="center" src="http://nathenharvey.s3-website-us-east-1.amazonaws.com/blog/images/greenscreen/4567_building.jpg" width="210" height="121" title="customink building" alt="customink building">
</a>
We've also added support for controlling which builds are displayed from each CI server. So that you can explicitly include or exclude builds or just go with the default behavior of showing all builds on the server.</p>

<h2>Deploying</h2>

<p>I'll cover a couple of deployment options for Green Screen in my <a href="http://nathenharvey.com/blog/2012/01/02/deploying-green-screen">next post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agenda Tips for a Tech User Group]]></title>
    <link href="http://www.nathenharvey.com/blog/2011/12/13/agenda-tips-for-a-tech-user-group/"/>
    <updated>2011-12-13T19:53:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2011/12/13/agenda-tips-for-a-tech-user-group</id>
    <content type="html"><![CDATA[<p>In my <a href="http://nathenharvey.com/blog/2011/12/13/tips-for-hosting-a-tech-user-group/">previous post</a>, I gave some <a href="http://nathenharvey.com/blog/2011/12/13/tips-for-hosting-a-tech-user-group/">ideas about how to run a successful user group meeting</a>. In this post, I'll focus on the actual meeting format we typically use for our <a href="http://www.meetup.com/Washington-DC-MongoDB-Users-Group/">Washington DC MongoDB Users Group</a>. You may find that this format works well for any technical user group.</p>

<p>We've experimented with a couple of different formats but I think we've settled into something that generally works for us. Some of these don't work with a meeting that's larger than 20 people; adjust accordingly.</p>

<!--more-->


<h3>Sign-in sheets</h3>

<p>I usually include a sign-in sheet for our meetings. The sheets usually include space for name, email address, twitter handle, and a space for the attendee to write in a question or topic they'd like to discuss when we have some an open discussion. Usually attendees are already on members on <a href="http://www.meetup.com/">Meetup.com</a> so it's easy enough to reach out to them but this provides another way to capture their contact info.</p>

<h3>Introductions and Announcements</h3>

<p>We start the meeting by going around the room and asking everyone to introduce themselves and share any announcements they may have. The announcements might be that they're hiring, looking for work, or something about an application or open source contribution they've made.</p>

<h3>Meeting content</h3>

<p>After the introductions, you get into the meat of the meeting. This can take on many different formats here are some that we've used successfully:</p>

<h4>Demos &amp; Tutorials</h4>

<p>Having someone demo a product or application that they've built always goes over well. In some instances, we've had people build applications on-the-fly to give attendees an idea of how easy it can be to work with <a href="http://www.mongodb.org/">MongoDB</a>.</p>

<h4>Lightning Talks</h4>

<p>4-6 attendees give 5-10 minute talks on a given subject related to MongoDB. This is a great way for the attendees to share something they're passionate about and practice their presentation skills.</p>

<h4>"Un-meeting"</h4>

<p>During an un-meeting, participants propose talks or discussion items and that drives the agenda for the meeting. I try to leave time for this sort of attendee-driven agenda in every meeting, even when we have scheduled presenters.</p>

<h4>Presentations</h4>

<p>It's great to line-up one or two speakers for the meeting. I think the best combination of speakers for a MongoDB meeting is to have one "intro" talk and one that is more advanced. We always seem to have a number of attendees who have done very little, if anything, with MongoDB prior to the meeting. Having an introductory presentation is great for them. The more advanced talk may get into replication, sharding, or production operations.</p>

<h3>Picks, tips, and #protips</h3>

<p>I stole this idea from the <a href="http://rubyrogues.com/">Ruby Rogues podcast</a>. At the end of each meeting we go around the room and ask each attendee to share a pick, tip, or #protip. These can be related to MongoDB but don't have to be. Heck, they don't need to be related to tech at all. Just something that the attendee has been using, doing, or has learned recently that he'd like to share with the group. Tips have included emacs and vi tips, command line tips, books, games, and even <a href="http://www.wikihow.com/Suppress-the-Gag-Reflex">tips on how to suppress the gag reflex</a>.</p>

<h3>Announce the next meetup</h3>

<p>It's key to announce the next meetup at the end of the current one. Minimally, you'll want to announce the date, time, and location. Preferably, you'll also be able to announce the theme of the night or the actual speakers.</p>

<h3>Other ideas</h3>

<p>Lately, I've been kicking around the idea of a book club meeting. The idea is that we'd pick a book, maybe <a href="http://www.manning.com/banker/">MongoDB in Action</a> and build a couple of the meeting agendas around chapters from the book. For example, perhaps we'd look at Part 1 Getting started in February, Part 2 - Application development in March, and Part 3 - MongoDB mastery in April. We may even be able to spend an entire meeting on the content and theme of a single chapter. The group could publish reviews of each section as they go. Have you had any experience with a user group that's done this?</p>

<p>We've also used Skype to bring experts in to present virtually. I've found that this works best when the presenter has a brief (15 minute) presentation and then is available for Q &amp; A.</p>

<p>For some more great suggestions, including suggestions on how to get great presenters, check out <a href="https://twitter.com/cwestin63">Chris Westin's</a> blog post - <a href="https://www.bookofbrilliantthings.com/blog/how-to-run-a-successful-tech-meetup">How to Run a Successful Tech Meetup</a>.</p>

<p>What suggestions do you have? Please leave a comment or get in touch with me.</p>

<p>Also, checkout my <a href="http://nathenharvey.com/blog/2011/12/13/tips-for-hosting-a-tech-user-group/">previous post</a> where I gave some <a href="http://nathenharvey.com/blog/2011/12/13/tips-for-hosting-a-tech-user-group/">ideas about how to run a successful user group meeting</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for Hosting a Tech User Group]]></title>
    <link href="http://www.nathenharvey.com/blog/2011/12/13/tips-for-hosting-a-tech-user-group/"/>
    <updated>2011-12-13T19:24:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2011/12/13/tips-for-hosting-a-tech-user-group</id>
    <content type="html"><![CDATA[<p>In January of 2011, I started hosting a <a href="http://www.meetup.com/Washington-DC-MongoDB-Users-Group/">monthly MongoDB meetup</a>. My employer, <a href="http://www.customink.com/">CustomInk</a>, was looking for ways to become better known in the local DC technology market. We were also just getting started with our initial production deployment of MonogoDB. Having engineers from the area come to our office, get to know CustomInk, and share their experiences with using MongoDB was a great opportunity!</p>

<p>Before I get much further, I'd like to give a hat tip to those user groups and podcasts that I learned from and stole ideas from. Namely, <a href="http://www.meetup.com/dcruby/">DC RUG</a>, <a href="http://www.meetup.com/bmore-on-rails/">B'more on Rails group</a>, and the <a href="http://rubyrogues.com/">Ruby Rogues podcast</a>.</p>

<p>Having a good space for hosting these types of meetings is important. CustomInk has two different spaces that we can utilize. The Parlour is a very cozy sitting room that includes a fireplace. It's suitable for a groups of up to 30 people. The Cafe is quite a bit larger, we can host up to 80 people there. We also have a very nice outdoor patio which could hold 80 people but planning weather-dependent meetings doesn't feel like the right way to go. The patio is connected to both the Parlour and the Cafe so networking at the beginning of the meeting sometimes happens there.</p>

<p>Our success hosting the <a href="http://www.meetup.com/Washington-DC-MongoDB-Users-Group/">MongoDB User Group</a> has led to us hosting a number of other meetups. We are the regular host for the <a href="http://www.meetup.com/DevOpsDC/">DevOps DC</a> meetup and have hosted events for <a href="http://www.meetup.com/ncagtug/events/17035395/">Android application development</a>, <a href="http://www.meetup.com/R-users-DC/events/37862562/">R user group</a>, <a href="http://www.meetup.com/NoVa-Javascript-Ext-JS-Users-Group/events/36841452/">JavaScript user group</a>, and a <a href="http://www.meetup.com/TwitterTeaTimeDC/events/38265862/">Twitter API meetup</a>.</p>

<p>The MongoDB group now includes over 250 members and the DevOps DC group is over 100. Based on our experience, I believe there are a number of things that you can do to grow and run a successful meetup group.</p>

<!--more-->


<h3>Consistent date, time, location</h3>

<p>Having a consistent date, time, and location may be one of the most important things you can do. This allows members to plan their schedule and their commute. Finding the location of any meetup can be an anxiety-filled experience for some people. Is this the right building? Which floor is this meeting on? There's comfort in knowing that next month's meeting will happen in the same space as this month's. You may feel it would be better to alternate locations. We've certainly had some requests for this in the groups we regularly host. Based on feedback from other groups and some of our own experience, this is a bad idea. We've seen or heard of too many members missing meetings because they went to the "other" location. For the MongoDB group, we meet on the third Wednesday of the month at 6:30. Pick a day and time that works best for you and stick with it.</p>

<p>A location that is easily accessible via public transportation is certainly desirable but may not always be feasible.</p>

<h3>Encourage member participation</h3>

<p>Once you've got everyone at your meetup it's important that you make this a warm, welcoming place where members feel comfortable and are encouraged to participate. We ask attendees to introduce themselves, share a pick, and contribute during open discussions.</p>

<h3>Register a twitter account</h3>

<p>A twitter handle that matches your group is a great way to help promote your meetings and encourage attendance. I use <a href="http://twitter.com/mongodc">@MongoDC</a> and will frequently tweet about topics that our members are interested in. Of course, the primary use of the account is to announce upcoming meetings and speakers. However, I also use it for sharing MongoDB related news such as <a href="https://twitter.com/#!/MongoDC/status/113307839249907713">product releases</a> and <a href="https://twitter.com/#!/MongoDC/status/135041129455427584">upcoming conferences</a>. Additionally, we ask our members to share their twitter handle when they arrive. This allows me to put together a <a href="https://twitter.com/#!/MongoDC/mongodc-16-nov-2011/members">Twitter list</a> of the people who attended (an idea I stole from the <a href="http://www.meetup.com/bmore-on-rails/">B'more on Rails group</a>).</p>

<h3>Feed the group</h3>

<p>You're probably scheduling your meetings right around the same time that most people would otherwise be eating dinner. CustomInk provides pizza, sodas, and beer for each meetup. Personally, I'm a bit of a beer lover so try to provide a unique offering at each meeting. This a good sponsorship opportunity for companies interested in reaching your group, too.</p>

<h3>Give away FREE stuff</h3>

<p>What's a user group meeting without some sort of free swag? <a href="http://www.10gen.com/">10gen</a>, the company behind MongoDB, is great about making sure I always have something to give away at the meetings. Quick reference cards, stickers, and coffee mugs are usually in ample supply. Occasionally, we'll have a books, conference tickets or discounts, or other special swag that we can giveaway, too.</p>

<h3>Wifi</h3>

<p>Provide free wifi to your attendees. It's frustrating to go to a technical meeting without wifi.</p>

<h3>Leverage Meetup.com</h3>

<p><a href="http://www.meetup.com/">Meetup.com</a> has a lot of great tools to help you organize meetings, communicate with individual members or with the entire group, and more. Be sure to checkout the "Organizer Tips" available under the "Group Tools" menu. Create a presence on Facebook, LinkedIn, Twitter, or anywhere else your members or potential members are going to be but always link back to the group's page on meetup.com. Use the meetup site to post any presentations from your meetings. I also find it's very helpful to <a href="http://www.meetup.com/Washington-DC-MongoDB-Users-Group/pages/November_Meetup_Recap/">summarize your meetings on the site</a>. This gives attendees easy access to everything that happened and gives new members an idea about the content and quality of the meetings.</p>

<p>It might also be interesting to have a page on the Meetup site where your members can highlight their own open source contributions. Perhaps they've contributed to a MongoDB driver?</p>

<p>There are other sites that offer similar functionality to Meetup.com but I firmly believe Meetup.com is the best. It's where many people go to look for interesting groups and the tools they provide are great.</p>

<h3>Other ideas</h3>

<p>Lately, I've been kicking around the idea of having a group library. Members and publisher could contribute books that the group might be interested in. Each book could be "borrowed" for up to a month. Have you had any experience with a user group that's done this?</p>

<p>For some more great suggestions, including suggestions on how to get great presenters, check out <a href="https://twitter.com/cwestin63">Chris Westin's</a> blog post - <a href="https://www.bookofbrilliantthings.com/blog/how-to-run-a-successful-tech-meetup">How to Run a Successful Tech Meetup</a>.</p>

<p>What suggestions do you have? Please leave a comment or get in touch with me.</p>

<p>In my <a href="http://nathenharvey.com/blog/2011/12/13/agenda-tips-for-a-tech-user-group/">next post</a>, I'll provide <a href="http://nathenharvey.com/blog/2011/12/13/agenda-tips-for-a-tech-user-group/">some suggestions on the agenda / format for each meeting</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why we chose Chef over Puppet at CustomInk]]></title>
    <link href="http://www.nathenharvey.com/blog/2011/11/21/why-we-chose-chef-over-puppet-at-customink/"/>
    <updated>2011-11-21T03:29:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2011/11/21/why-we-chose-chef-over-puppet-at-customink</id>
    <content type="html"><![CDATA[<p>Not unlike most technology choices, the choice of which configuration management tool to use for managing your infrastructure as code is sure to spark debate among opinionated technologists. There are certainly a number of choices available all of which have their own strengths and weaknesses. There are a number of things to consider as you select a tool.</p>

<p>Before we get into any of the specifics, I want to make it clear that the "right" answer to this question is a simple, but emphatic "yes!" Yes, you should be using a tool that allows you to manage your infrastructure as code. That tool should NOT be a server.txt file that you keep on the machine that documents the installation, set-up, and configuration changes you've made. Moving that text to somewhere other than the local server is a step in the right direction but isn't really the answer. Moving the server.txt file to your corporate wiki is going to suck just as bad.</p>

<p>I think Mark Imbriaco summed it up quite nicely in 140 characters or less:</p>

<p><blockquote><p>Pro-tip: Nobody gives a shit about your opinion of Chef vs. Puppet. Seriously. Just fucking stop it already. #usewhatworksforyou</p><footer><strong>@markimbriaco</strong> <cite><a href='https://twitter.com/markimbriaco/statuses/89180299824599041'>twitter.com/markimbriaco/&hellip;</a></cite></footer></blockquote></p>

<p>As you consider which tool is right for you, you'll need to consider a number of questions. I think of these as the WIIFs, or "what's in it for..." questions:</p>

<!--more-->


<h3>WIIFM - What's in it for me</h3>

<p>You're going to want a tool that you're happy working with. You're going to make an investment in this tool. You'll need to learn to be proficient with the tool, master it, and use it in your everyday workflow. Pick something that you'll be happy working with for some time.</p>

<h3>WIIFC - What's in it for my customers</h3>

<p>It's highly unlikely that your customers know or care anything about how your infrastructure was built, provisioned, and managed. Why should they have any say about which tool you pick? Your customers are keenly interested in the services or products you offer. They also care about things like performance, availability, and how quickly you recover from an issue or outage. If they don't care about these things, they'll likely not be your customers for long. As you grow your business, you'll want to have more time for delivering value to customers. Spend less time building, provisioning, upgrading, and repairing your infrastructure.</p>

<h3>WIIFB - What's in it for my business</h3>

<p>You may be the only one who has to build and manage the infrastructure in your company but it's likely you'll eventually move beyond a technology team of one. As your technology team grows, you'll want to include everyone in the process of managing your infrastructure. This includes the people you might not think of as typically having a say in the infrastructure: developers, quality assurance engineers, etc. You do not want to be the only person in your company who knows how to manage the infrastructure and use the tools you've selected. Sure, it gives you a false sense of job security and feeds into your hero-complex but you need to be able to pass the on-call baton to someone else. Cost may also be a factor to consider when selecting a solution although it's likely it's more of a data-point than selection criteria, given the solutions that are on the market.</p>

<p>I cannot tell you which tool is right for you. There are many factors including the ones I've listed above. I have some experience with both Puppet and Chef. At <a href="http://www.customink.com">CustomInk</a>, we decided to switch to Chef after using Puppet for about two years.</p>

<h2>Why did we switch?</h2>

<h3>We're a Rails shop</h3>

<p>CustomInk is a Ruby on Rails shop and has been for many years. Being a Rails shop helped push us towards Chef in two ways. As a Rails shop, we suffer a bit from from the stereotypical "newer and shinier is better" syndrome that many people feel ails the Rails community. As a Rails shop, the domain-specific language (DSL) of Chef is a more comfortable way for us to work. Everyone on the technology team can easily understand the code.</p>

<h3>We started with Puppet</h3>

<p>We started with Puppet so, naturally, that's the one we switched from. Puppet was, and actually still is, working well for us. However, we found that working in Puppet was going a bit slower than we'd like. Also, as we started learning more about Chef we started to see how we'd be able to quickly benefit from some of the features it offers. To be fair, we were comparing the Puppet we were using (0.24.x) to the latest (at the time) version of Chef (0.9.x). There may well have been ways to do the things we wanted with Puppet but we weren't. Chef was intriguing and it looked like we'd be able to get more from it. Instead of working to refactor our Puppet and get smarter with how to use it, we went with Chef.</p>

<h3>Search</h3>

<p>Chef's ability to search our environment and use that information at run time is very appealing. The ability for us to define a database.yml template that can have the "host" value populated at runtime based on which host is currently the primary database server is great. Using search in our capistrano recipes to determine where the code should be deployed is a huge win.</p>

<h3>Knife</h3>

<p>Knife is Chef's powerful command line interface. There are many things you can do with knife, most of which fall outside of the scope of this article. Knife allows you to interact with your entire infrastructure and Chef code base. Use knife to bootstrap a server, build the scaffolding for a new cookbook, or apply a role to a set of nodes in your environment. You can use knife ssh to execute commands on any number of nodes in your environment. knife ssh + search is a very powerful combination. "Run this command on all nodes with role X."</p>

<h3>Dependency Management</h3>

<p>We found that defining dependencies in Puppet was overly verbose and cumbersome. With Chef, order matters and we could rest assured that dependencies would be met if we specified them in the proper order.</p>

<h3>Strong Community</h3>

<p>OpsCode has done a great job of keeping up a strong community. The community.opscode.com site, where hundreds of cookbooks are shared, is a great way to get started. OpsCode has also hosted numerous webinars, publishes all of their training material, and makes it very easy to contribute patches. Frankly, I don't have any experience with this in the Puppet world. However, my lack of experience with this in the Puppet world is likely attributed simply to the way my development habits have changed over time. At CustomInk, we've been able to submit patches to chef, a number of cookbooks, and have also published some of our own cookbooks.</p>

<h3>Developer Happiness</h3>

<p>As I mentioned previously, the DSL with Chef is much more comfortable than that of Puppet. The mental model and workflow suit us. I find that the time I spend working in Chef is when I feel most productive and happy.</p>

<p>I often wonder if the reason Chef is the right tool is because it's the second one we've used. Coming to infrastructure as code includes a learning curve. I feel that we're better Chef developers because we learned from our experience with Puppet. Some may even agree that Chef's a better tool because the developers of Chef learned from their experience with Puppet.</p>

<h3>A note for projects that are just getting started</h3>

<p>If your project is just getting started, the best choice for you is probably not to use any of the configuration management tools that allow you to manage your infrastructure as code. You should stay focused exclusively on delivering value to your customers. It's likely that the best solution for you is <a href="http://www.heroku.com/">Heroku</a>. Sure, Heroku puts some constraints on how you build your app, but they're a good way for you to think creatively. You can, and should, delay your choice of tools until you're ready to spin up your first server.</p>

<h2>TL;DR</h2>

<ul>
<li>If the question is "Chef or Puppet?", the answer is "Yes." You need to manage you infrastructure as code</li>
<li>Search, knife, dependency management, community, and developer happiness were the key reasons we switched</li>
<li>Chef is the right tool for us and it might be the right one for you</li>
<li>If you're new to the idea of "Infrastructure as Code", understand that there's a learning curve but your efforts will be rewarded</li>
</ul>


<p>Did you have to make a similar choice? What were some of the deciding factors? Which tool or framework did you end up with?</p>

<hr />

<p>This was originally posted on my <a href="http://nathenharvey.blogspot.com/2011/11/why-we-chose-puppet-over-chef-at.html">blogger site</a>.</p>
]]></content>
  </entry>
  
</feed>
