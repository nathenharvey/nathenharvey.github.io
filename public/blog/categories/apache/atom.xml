<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: apache | Nathen Harvey]]></title>
  <link href="http://www.nathenharvey.com/blog/categories/apache/atom.xml" rel="self"/>
  <link href="http://www.nathenharvey.com/"/>
  <updated>2013-01-07T23:26:01-05:00</updated>
  <id>http://www.nathenharvey.com/</id>
  <author>
    <name><![CDATA[Nathen Harvey]]></name>
    <email><![CDATA[nathen@nathenharvey.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Chef - Part 4]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/12/19/learning-chef-part-4/"/>
    <updated>2012-12-19T13:53:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/12/19/learning-chef-part-4</id>
    <content type="html"><![CDATA[<h2>Learning Chef Series</h2>

<ul>
<li><a href="http://nathenharvey.com/blog/2012/12/06/learning-chef-part-1/">Part 1</a> - Introduce the project, configure workstation, and register a node with hosted Chef</li>
<li><a href="http://nathenharvey.com/blog/2012/12/07/learning-chef-part-2/">Part 2</a> - Download cookbooks from the community site, add MongoDB, Apache, and Passenger to our node</li>
<li><a href="http://nathenharvey.com/blog/2012/12/14/learning-chef-part-3/">Part 3</a> - Start writing a cookbook to deploy our application</li>
<li><a href="http://nathenharvey.com/blog/2012/12/19/learning-chef-part-4/">Part 4</a> - Finish the application deploy, introduce roles</li>
</ul>


<p>Part 4 of our Learning Chef tutorial was run as a Google+ Hangout that was streamed to YouTube.</p>

<p>In Part 4, we completed the application deploy and then looked at <a href="http://docs.opscode.com/essentials_roles.html">roles</a>.</p>

<p>I'll update this post soon with a breakdown of each step we took during this session.  In the meantime, you can watch the entire video below.</p>

<p>Also, you can grab the code from the following repositories on github:</p>

<ul>
<li><a href="http://github.com/mulderp/learning-chef">Chef Repository</a></li>
<li><a href="http://github.com/mulderp/chef-demo">Rails Application</a></li>
</ul>


<iframe width="560" height="315" src="http://www.youtube.com/embed/fb4DJJmhUt8" frameborder="0" allowfullscreen></iframe>


<h2>What's Next</h2>

<p>In Learning Chef - Part 5 we will move the MongoDB to it's own VM.</p>

<p>In the meantime, please let us know what you think of this post and these videos!  Drop a note in the comments or reach out to <a href="https://twitter.com/nathenharvey">@nathenharvey</a> or <a href="http://twitter.com/mulpat">@mulpat</a> on twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Chef - Part 3]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/12/14/learning-chef-part-3/"/>
    <updated>2012-12-14T12:14:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/12/14/learning-chef-part-3</id>
    <content type="html"><![CDATA[<h2>Learning Chef Series</h2>

<ul>
<li><a href="http://nathenharvey.com/blog/2012/12/06/learning-chef-part-1/">Part 1</a> - Introduce the project, configure workstation, and register a node with hosted Chef</li>
<li><a href="http://nathenharvey.com/blog/2012/12/07/learning-chef-part-2/">Part 2</a> - Download cookbooks from the community site, add MongoDB, Apache, and Passenger to our node</li>
<li><a href="http://nathenharvey.com/blog/2012/12/14/learning-chef-part-3/">Part 3</a> - Start writing a cookbook to deploy our application</li>
<li><a href="http://nathenharvey.com/blog/2012/12/19/learning-chef-part-4/">Part 4</a> - Finish the application deploy, introduce roles</li>
</ul>


<p>Part 3 of our Learning Chef tutorial was run as a Google+ Hangout that was streamed to YouTube.</p>

<p>In Part 3, we added a bunch of cookbooks from the community site including <a href="http://ckbk.it/git">git</a>, <a href="http://ckbk.it/application">application</a>, and <a href="http://ckbk.it/application_ruby">application_ruby</a>.  After adding these cookbooks, we created a cookbook of our own to deploy a <a href="https://github.com/mulderp/chef-demo">sample Rails application</a>.</p>

<p>The application wasn't fully deployed by the end of the tutorial but we'll pick-up from there next time.</p>

<p>I'll update this post soon with a breakdown of each step we took during this session.  In the meantime, you can watch the entire video below.</p>

<p>Also, you can grab the code from the following repositories on github:</p>

<ul>
<li><a href="http://github.com/mulderp/learning-chef">Chef Repository</a></li>
<li><a href="http://github.com/mulderp/chef-demo">Rails Application</a></li>
</ul>


<iframe width="560" height="315" src="http://www.youtube.com/embed/3cA1IL8DV8I" frameborder="0" allowfullscreen></iframe>


<h2>What's Next</h2>

<p>In <a href="http://nathenharvey.com/blog/2012/12/19/learning-chef-part-4/">Learning Chef - Part 4</a> we finish the deployment of the sample application and then explore roles.</p>

<p>In the meantime, please let us know what you think of this post and these videos!  Drop a note in the comments or reach out to <a href="https://twitter.com/nathenharvey">@nathenharvey</a> or <a href="http://twitter.com/mulpat">@mulpat</a> on twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Chef - Part 2]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/12/07/learning-chef-part-2/"/>
    <updated>2012-12-07T13:18:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/12/07/learning-chef-part-2</id>
    <content type="html"><![CDATA[<h2>Learning Chef Series</h2>

<ul>
<li><a href="http://nathenharvey.com/blog/2012/12/06/learning-chef-part-1/">Part 1</a> - Introduce the project, configure workstation, and register a node with hosted Chef</li>
<li><a href="http://nathenharvey.com/blog/2012/12/07/learning-chef-part-2/">Part 2</a> - Download cookbooks from the community site, add MongoDB, Apache, and Passenger to our node</li>
<li><a href="http://nathenharvey.com/blog/2012/12/14/learning-chef-part-3/">Part 3</a> - Start writing a cookbook to deploy our application</li>
<li><a href="http://nathenharvey.com/blog/2012/12/19/learning-chef-part-4/">Part 4</a> - Finish the application deploy, introduce roles</li>
</ul>


<p>Part 2 of our Learning Chef tutorial was run as a Google+ Hangout that was streamed to YouTube.</p>

<h2>Review of Part 1</h2>

<ul>
<li><a href="http://nathenharvey.com/blog/2012/12/06/learning-chef-part-1/">Read the blog post for Part 1</a></li>
</ul>


<iframe width="420" height="315" src="http://www.youtube.com/embed/E4ibkS1LbPk" frameborder="0" allowfullscreen></iframe>


<h2>Discuss Chef Solo vs. Chef Server</h2>

<p>Chef Solo allows you to run Chef Cookbooks without a Chef Server.  There are a number of things that you don't get when using Chef Solo.  Check the <a href="http://wiki.opscode.com/display/chef/Chef+Solo">Chef Solo page on the wiki</a> for more information.</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/QwiPbEXhe24" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<p></p>

<h2>Download a number of cookbooks from the community site</h2>

<p>Now that we've got our Vagrant instance connected to Chef Server we can start managing the configuration of the VM with Chef.  We'll download a number of cookbooks from the <a href="http://community.opscode.com">Community Site</a> and extract them into our Chef repository.</p>

<p>Here are the commands we ran to download each cookbook:</p>

<ol>
<li><code>knife cookbook site download omnibus_updater</code></li>
<li><code>knife cookbook site download apache2</code></li>
<li><code>knife cookbook site download apt</code></li>
<li><code>knife cookbook site download build-essentials</code></li>
<li><code>knife cookbook site download mongodb</code></li>
<li><code>knife cookbook site download omnibus_updater</code></li>
<li><code>knife cookbook site download passenger_apache2</code></li>
</ol>


<p>After downloading each cookbook, extract it to the cookbooks directory of the chef-repo:</p>

<p><code>tar xzvf COOKBOOK_NAME.tar.gz -C cookbooks</code></p>

<p>Finally, upload each cookbook to the Hosted Chef server:</p>

<p><code>knife cookbook upload COOKBOOK_NAME</code></p>

<p>This video shows the process for grabbing the <code>omnibus_updater</code> cookbook off of the <a href="http://community.opscode.com">community site</a>.</p>

<ol>
<li><code>knife cookbook site download omnibus_updater</code></li>
<li><code>tar xzvf omnibus_updater-0.0.5.tar.gz -C cookbooks</code></li>
<li><code>knife cookbook upload omnibus_updater</code></li>
</ol>


<iframe width="560" height="315" src="http://www.youtube.com/embed/d1npGSBgyrs" frameborder="0" allowfullscreen></iframe>


<p>This video shows the process for grabbing the <code>mongodb</code> cookbook, and it's dependency, the <code>apt</code> cookbook, off of the community site.</p>

<ol>
<li><code>knife cookbook site download mongodb</code></li>
<li><code>knife cookbook site download apt</code></li>
<li><code>tar xzvf mongodb-0.11.0.tar.gz -C cookbooks</code></li>
<li><code>tar xzvf apt-1.5.0.tar.gz -C cookbooks</code></li>
<li><code>knife cookbook upload apt</code></li>
<li><code>knife cookbook upload mongodb</code></li>
</ol>


<iframe width="420" height="315" src="http://www.youtube.com/embed/wyLtF261a6A" frameborder="0" allowfullscreen></iframe>


<h2>Update the run list for our node</h2>

<p>There are a number of ways to update a node's run list.  You can do so in a web browser while logged in to Hosted Chef or you can do so using knife.</p>

<p>In our session, we first used the Opscode Chef management interface.</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/Q0BgCLSqJJU" frameborder="0" allowfullscreen></iframe>


<p>You can also update your node's run list using knife.  In this video, we'll use knife to add mongodb to the node's run list.</p>

<ol>
<li><code>export EDITOR=vim</code> - knife uses the <code>EDITOR</code> environment variable to determine which application to launch when you edit the node.</li>
<li>Add <code>"recipe[mongodb]"</code> to the <code>run_list</code></li>
<li>Run <code>chef-client</code> on the node using the <code>vagrant provision</code> command.</li>
</ol>


<iframe width="420" height="315" src="http://www.youtube.com/embed/5xU3A-SvdJc" frameborder="0" allowfullscreen></iframe>


<p>We'll follow the same steps to add <code>passenger_apache2</code> to our run list.</p>

<ol>
<li><code>knife cookbook site download passenger_apache2</code></li>
<li><code>tar xzvf passenger_apache2-1.0.0.tar.gz -C cookbooks</code></li>
<li><code>knife cookbook site download apache2</code></li>
<li><code>tar xzvf apache2-1.3.2.tar.gz -C cookbooks</code></li>
<li><code>knife cookbook upload apache2</code></li>
<li><code>knife cookbook site download build-essential</code></li>
<li><code>tar xzvf build-essential-1.2.0.tar.gz -C cookbooks</code></li>
<li><code>knife cookbook upload build-essential</code></li>
<li><code>knife cookbook upload passenger_apache2</code></li>
</ol>


<p>We will then add <code>passenger_apache2</code> to the run list using <code>knife node edit patrick_vm</code>.  When we run <code>vagrant provision</code>, we'll hit an error that requires us to add <code>apt</code> to the run list prior to <code>passenger_apache2</code>.</p>

<p>By the end of this video, the run list should look like:</p>

<p>```
"run_list" : [</p>

<pre><code>"recipe[apt]",
"recipe[omnibus_updater]",
"recipe[mongodb]",
"recipe[passenger_apache2]"
</code></pre>

<p>]
```</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/0-Bid-eiJHY" frameborder="0" allowfullscreen></iframe>


<h2>Add port forwarding to the Vagrant instance</h2>

<p>Finally, we updated the Vagrant configuration so that port 80 on the VM is forwarded to port 8080.  This was done by adding <code>config.vm.forward_port 80, 8080</code> to our Vagrantfile.  Here's the full Vagrantfile:</p>

<p>``` ruby Vagrantfile
Vagrant::Config.run do |config|
  config.vm.box = "opscode-ubuntu-12.04"
  config.vm.box_url = "https://opscode-vm.s3.amazonaws.com/vagrant/boxes/opscode-ubuntu-12.04.box"
  config.vm.forward_port 80, 8080</p>

<p>  config.vm.provision :chef_client do |chef|</p>

<pre><code>chef.chef_server_url = "https://api.opscode.com/organizations/fidor"
chef.validation_key_path = "./.chef/fidor-validator.pem"
chef.validation_client_name = "fidor-validator"
chef.node_name = "patrick_vm"
</code></pre>

<p>  end
end
```</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/ag0w_IqkgBI" frameborder="0" allowfullscreen></iframe>


<h2>Summarizing Part 2</h2>

<p>We now have the following in place:</p>

<ul>
<li>A node managed by Chef - our Vagrant VM</li>
<li>The latest version of Chef (10.16.2) is running on the node</li>
<li>Six cookbooks added to our local workstation</li>
<li>Six cookbooks added to our Hosted Chef organization</li>
<li>The run list for our node was updated</li>
<li>The node has a working MongoDB database running</li>
<li>The node has Apache and Passenger running</li>
<li>Port Forwarding is configured on the Vagrant VM</li>
</ul>


<iframe width="420" height="315" src="http://www.youtube.com/embed/7Cxfv40w7wQ" frameborder="0" allowfullscreen></iframe>


<h2>What's Next</h2>

<p>In <a href="http://nathenharvey.com/blog/2012/12/14/learning-chef-part-3/">Learning Chef - Part 3</a> we install some more cookbooks and start writing our own cookbook to deploy a sample Rails application.</p>

<p>In the meantime, please let us know what you think of this post and these videos!  Drop a note in the comments or reach out to <a href="https://twitter.com/nathenharvey">@nathenharvey</a> or <a href="http://twitter.com/mulpat">@mulpat</a> on twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Joy of Cooking - Whip Up a Rails Environment with Chef]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/05/25/the-joy-of-cooking-whip-up-a-rails-environment-with-chef/"/>
    <updated>2012-05-25T14:59:00-04:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/05/25/the-joy-of-cooking-whip-up-a-rails-environment-with-chef</id>
    <content type="html"><![CDATA[<p>You've heard of Chef, Puppet, and other frameworks that can help you build out your infrastructure. You've been meaning to play around with one or more of them for some time now. Now's your chance; Start cooking up on your own servers!</p>

<p>In this presentation, I provide an introduction to Chef with a focus on what you'll need to know to get a Rails application up and running.</p>

<p>Topics include:
  * Introduction to Chef
  * Nodes, roles, environments, and other terminology
  * Introduction to cookbooks
  * Provisioning an environment for a Rails application
  * Deploying with Capistrano</p>

<p>You won't be ready to compete in Iron Chef, but you will be ready to serve up your own Rails environment in no time.</p>

<p>I gave slightly different versions of this presentation at <a href="http://www.rubynation.org/">RubyNation 2012</a> and <a href="http://chefconf.opscode.com">#ChefConf 2012</a>.</p>

<p>I'd really appreciate any comments, questions, or feedback in the comments section below.</p>

<h3>Video from ChefConf</h3>

<iframe width="560" height="315" src="http://www.youtube.com/embed/X1mmzERRkeI" frameborder="0" allowfullscreen></iframe>


<h3>Slides</h3>

<script async class="speakerdeck-embed" data-id="4fb421272cf6f5001f00ba85" data-ratio="1.2945638432364097" src="http://www.nathenharvey.com//speakerdeck.com/assets/embed.js"></script>


<hr />

<p><sub>Reposted from the <a href="http://technology.customink.com/blog/2012/05/25/the-joy-of-cooking-whip-up-a-rails-environment-with-chef/">CustomInk Technology blog</a>.</sub></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing mod_rewrite and apache redirects]]></title>
    <link href="http://www.nathenharvey.com/blog/2010/07/16/testing-mod-rewrite-and-apache-redirects/"/>
    <updated>2010-07-16T09:00:00-04:00</updated>
    <id>http://www.nathenharvey.com/blog/2010/07/16/testing-mod-rewrite-and-apache-redirects</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.customink.com">CustomInk</a>, we recently migrated from mongrel to Passenger for our Ruby on Rails website. This migration included a full rewrite of our apache configuration files.</p>

<p>With over 500 redirect and rewrite rules in place I needed a way to ensure my copy-n-paste skills were up to snuff and that we didn't loose any redirects along the way.</p>

<p>In my search for help, I found a <a href="http://www.viget.com/extend/test-drive-mod-rewrite-rules-with-testunit/">blog post by Patrick Reagan from Viget labs</a> that described a method for writing tests that will verify all the rewrite rules and redirects. Patrick's ideas were packaged up into a gem and available on <a href="http://github.com/eightbitraptor/http_redirect_test">github</a>.</p>

<p>I can now write up tests like:</p>

<p><code>ruby
should_redirect "/cink/ideas/ideas.jsp", :to =&gt; "/inspiration/"
</code></p>

<p>So now I can to some TDC (test-driven configuration) whenever I get a request for a new redirect.</p>

<p>What other methods have you used to test your rewrite rules?</p>
]]></content>
  </entry>
  
</feed>
