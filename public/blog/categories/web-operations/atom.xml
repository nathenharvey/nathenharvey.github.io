<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web operations | Nathen Harvey]]></title>
  <link href="http://www.nathenharvey.com/blog/categories/web-operations/atom.xml" rel="self"/>
  <link href="http://www.nathenharvey.com/"/>
  <updated>2012-05-25T15:16:43-04:00</updated>
  <id>http://www.nathenharvey.com/</id>
  <author>
    <name><![CDATA[Nathen Harvey]]></name>
    <email><![CDATA[nathen@nathenharvey.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Joy of Cooking - Whip Up a Rails Environment with Chef]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/05/25/the-joy-of-cooking-whip-up-a-rails-environment-with-chef/"/>
    <updated>2012-05-25T14:59:00-04:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/05/25/the-joy-of-cooking-whip-up-a-rails-environment-with-chef</id>
    <content type="html"><![CDATA[<p>You've heard of Chef, Puppet, and other frameworks that can help you build out your infrastructure. You've been meaning to play around with one or more of them for some time now. Now's your chance; Start cooking up on your own servers!</p>

<p>In this presentation, I provide an introduction to Chef with a focus on what you'll need to know to get a Rails application up and running.</p>

<p>Topics include:
  * Introduction to Chef
  * Nodes, roles, environments, and other terminology
  * Introduction to cookbooks
  * Provisioning an environment for a Rails application
  * Deploying with Capistrano</p>

<p>You won't be ready to compete in Iron Chef, but you will be ready to serve up your own Rails environment in no time.</p>

<p>I gave slightly different versions of this presentation at <a href="http://www.rubynation.org/">RubyNation 2012</a> and <a href="http://chefconf.opscode.com">#ChefConf 2012</a>.</p>

<p>I'd really appreciate any comments, questions, or feedback in the comments section below.</p>

<h3>Video from ChefConf</h3>

<iframe width="560" height="315" src="http://www.youtube.com/embed/X1mmzERRkeI" frameborder="0" allowfullscreen></iframe>


<h3>Slides</h3>

<script async class="speakerdeck-embed" data-id="4fb421272cf6f5001f00ba85" data-ratio="1.2945638432364097" src="http://www.nathenharvey.com//speakerdeck.com/assets/embed.js"></script>


<hr />

<p><sub>Reposted from the <a href="http://technology.customink.com/blog/2012/05/25/the-joy-of-cooking-whip-up-a-rails-environment-with-chef/">CustomInk Technology blog</a>.</sub></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taming the Kraken - How Operations enables developer productivity]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/05/25/taming-the-kraken-how-operations-enables-developer-productivity/"/>
    <updated>2012-05-25T14:31:00-04:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/05/25/taming-the-kraken-how-operations-enables-developer-productivity</id>
    <content type="html"><![CDATA[<p>At <a href="http://railsconf2012.com/">RailsConf 2012</a>, I gave a presentation on how the <a href="http://www.customink.com">CustomInk</a> web operations team enables developer productivity.</p>

<p>There's always a bit of tension when getting features from idea to production. In this talk, I describe some of the changes CustomInk has made to reduce this friction and keep the new features coming. Gone are the days of bi-monthly deploys, office pools dedicated to guessing when this deploy will be rolled back, and the ceremony surrounding the deploy-rollback-fix-deploy cycle. Today, ideas flow from product managers to developers to production with ease thanks to a number of changes that we've made to our teams, processes and tools.</p>

<p>Presenting at RailsConf was a really enjoyable experience and the presentation was well received.  There were lots of questions from the audience after the presentation.  Unfortunately, the Q &amp; A section was not captured in the video.  I'd really appreciate any questions or feedback you have, just drop a comment below.</p>

<h3>Video</h3>

<iframe width="560" height="315" src="http://www.youtube.com/embed/5vzNzQzmAk0" frameborder="0" allowfullscreen></iframe>


<h3>Slides</h3>

<script async class="speakerdeck-embed" data-id="4f96da12947c45001f018683" data-ratio="1.2945638432364097" src="http://www.nathenharvey.com//speakerdeck.com/assets/embed.js"></script>


<hr />

<p><sub>Reposted from the <a href="http://technology.customink.com/blog/2012/05/25/taming-the-kraken-how-operations-enables-developer-productivity/">CustomInk Technology blog</a>.</sub></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Collaborating with Chef]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/01/13/collaborating-with-chef/"/>
    <updated>2012-01-13T16:25:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/01/13/collaborating-with-chef</id>
    <content type="html"><![CDATA[<p>This week at <a href="http://www.customink.com">CustomInk</a>, the Web Operations team was asked by the development teams to make some configuration changes on a couple of different servers.</p>

<p>They were simple changes, adding a line or two to the services.yml file for each application. The details really aren't important but let's look at how we worked together to implement the changes.</p>

<h2>Before Chef</h2>

<p>In the past, here's how the changes likely would have been implemented.</p>

<ol>
<li>Developer realizes a change is required.</li>
<li>Developer asks the ops team to make the change</li>
<li>Ops makes the update using the appropriate tools</li>
</ol>


<p>OR</p>

<ol>
<li>Developer realizes a change is required.</li>
<li>Developer considers asking the ops team to make the change but thinks better of it</li>
<li>Developer makes the change manually, Ops doesn't know, Ops can no longer provision a new server properly.</li>
</ol>


<h2>With Chef</h2>

<p>We've been using Chef for some time and have just started asking our developers to help maintain their own apps. This week, two applications needed to know about some additional external services. This required a simple update to a YAML file in each application. In both cases, I asked the developers to clone our chef repo, make the changes they needed, and submit a pull request.</p>

<p>In one instance, the simple services.yml turned into a pull request with updates to a number of nagios nrpe checks that we're running. Something that the developer didn't ask for originally but took the initiative to add while in the code.</p>

<p>Thanks to <a href="http://twitter.com/chmurph2">@chmurph2</a> and <a href="http://twitter.com/jmorton">@jmorton</a> for taking their first steps into Chef.</p>

<p>Is this a huge accomplishment? No.  But it is a great first step.</p>

<p><blockquote><p>.@nathenharvey Working together == every engineer is on the same team and you stop celebrating (or thinking about) cross-team collaboration.</p><footer><strong>@btmerr</strong> <cite><a href='https://twitter.com/#!/btmerr/status/157941260680835072'>twitter.com/#!/btmerr/status/&hellip;</a></cite></footer></blockquote></p>

<p>We've always worked as one team but continue to have some clear areas of responsibility. While I understand what Brian's saying, I'm not sure everyone doing everything makes sense. We're one team but we each have our strengths. Agree that we should stop celebrating about this a cross-team collaboration; it should be the norm.  But, we have to start somewhere and these were the first steps into the world of infrastructure as code for the developers. In my mind, that's a WIN!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Green Screen]]></title>
    <link href="http://www.nathenharvey.com/blog/2012/01/02/deploying-green-screen/"/>
    <updated>2012-01-02T16:59:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2012/01/02/deploying-green-screen</id>
    <content type="html"><![CDATA[<p>In my <a href="http://nathenharvey.com/blog/2012/01/02/green-screen/">previous post</a>, I introduced <a href="https://github.com/customink/greenscreen">Green Screen</a>, a build monitoring tool that is designed to be used as a dynamic Big Visible Chart (BVC) in your work area.  It lets you add links to your build servers and displays the largest possible information on a monitor so that the team can see the build status from anywhere in the room.</p>

<p>It is easy enough to get <a href="https://github.com/customink/greenscreen">Green Screen</a> up and running on your own server or VM. The project's <a href="https://github.com/customink/greenscreen/blob/master/README.md">README</a> includes all the information you'll need for doing so. In this post, I'll describe the steps necessary to run Green Screen on Heroku or on your own server using Chef.</p>

<h2>Deploying to Heroku</h2>

<p>Deploying to <a href="http://www.heroku.com/">Heroku</a> is probably the easiest way to get up and running with Green Screen. You'll need a Heroku account but a free one should be sufficient. Check the <a href="http://devcenter.heroku.com/articles/quickstart">quick start guide</a> if you don't yet have an account.</p>

<p>Once you've got your Heroku account set-up, simply follow these steps to get your Green Screen app deployed:</p>

<ol>
<li><code>git clone git@github.com:customink/greenscreen.git</code></li>
<li><code>cd greenscreen</code></li>
<li><code>gem install heroku</code></li>
<li><code>heroku create</code></li>
<li><code>git push heroku master</code></li>
<li><code>heroku open</code></li>
</ol>


<p>If your build servers are running on the Internet, Heroku may be all that you need.</p>

<p><strong>Warning</strong> this default Green Screen looks at all of the builds currently running on <a href="http://ci.jenkins-ci.org">http://ci.jenkins-ci.org</a>.  This is fine for demo purposes but you may find it to be a bit overwhelming since it's <strong>over 300 builds</strong> at the time of this writing.</p>

<p>You can see a sample of this app running at <a href="http://greenscreenapp.com">http://greenscreenapp.com</a></p>

<!--more-->


<h2>Deploying with Chef</h2>

<p>If your build servers are not publicly accessible, Heroku won't be a great option. <a href="http://www.customink.com">CustomInk</a> has published a <a href="http://community.opscode.com/cookbooks/greenscreen">Chef cookbook</a> for setting up Green Screen on one of your nodes.</p>

<p>You simply need to include the greenscreen recipe to install, configure, and run one or more GreenScreen applications.  Or add it to your role, or directly to a node's recipes.</p>

<p><code>ruby
include_recipe "greenscreen"
</code></p>

<p>Of course, if you're just getting started with Chef, you should look at <a href="http://vagrantup.com/">Vagrant</a> which is a tool for building and distributing virtualized development environments. With Vagrant, you can quickly spin-up a VM in <a href="http://www.virtualbox.org/">VirtualBox</a> and have it use the greenscreen cookbook.</p>

<p>The cookbook allows you to specify credentials and jobs to include or ignore with each server and allows you to set-up multiple Green Screens on the same node. At CustomInk, we use different Green Screen applications for different teams.</p>

<p>Here's an excerpt from one of our Chef environment files:</p>

<p>``` ruby
"greenscreens" => [
  {</p>

<pre><code>:name =&gt; "greenscreen",
:port =&gt; "4567",
:servers =&gt; [
  {
    :url =&gt; "http://build01.customink.office:8080/cc.xml"
  },
  {
    :url =&gt; "http://build02.customink.office:8080/cc.xml",
    :username =&gt; "hudson",
    :password =&gt; "hudson_password"
  },
  {
    :url =&gt; "http://build03.customink.office:8080/cc.xml",
    :username =&gt; "hudson",
    :password =&gt; "hudson_password",
    :ignore_jobs =&gt; ["www_redirects"]
  }
]
</code></pre>

<p>  },
  {</p>

<pre><code>:name =&gt; "greenscreen.webops",
:port =&gt; "4568",
:servers =&gt; [
  {
    :url =&gt; "http://build03.customink.office:8080/cc.xml",
    :username =&gt; "hudson",
    :password =&gt; "hudson_password",
    :jobs =&gt; ["www_redirects"]
  },
  {
    :url =&gt; "http://build04.customink.office/cc.xml",
    :username =&gt; "jenkins",
    :password =&gt; "jenkis_password"
  }
]
</code></pre>

<p>  }
]
```</p>

<p>With this configuration, we have 2 Green Screens running, on ports 4567 and 4568. Both are polling build servers and showing different jobs. For instance, the server on 4567 excludes the www_redirects build (<code>:ignore_jobs =&gt; ["www_redirects"]</code>) whereas the server on 4568 only includes this build (<code>:jobs =&gt; ["www_redirects"]</code>) when polling the build03 server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agenda Tips for a Tech User Group]]></title>
    <link href="http://www.nathenharvey.com/blog/2011/12/13/agenda-tips-for-a-tech-user-group/"/>
    <updated>2011-12-13T19:53:00-05:00</updated>
    <id>http://www.nathenharvey.com/blog/2011/12/13/agenda-tips-for-a-tech-user-group</id>
    <content type="html"><![CDATA[<p>In my <a href="http://nathenharvey.com/blog/2011/12/13/tips-for-hosting-a-tech-user-group/">previous post</a>, I gave some <a href="http://nathenharvey.com/blog/2011/12/13/tips-for-hosting-a-tech-user-group/">ideas about how to run a successful user group meeting</a>. In this post, I'll focus on the actual meeting format we typically use for our <a href="http://www.meetup.com/Washington-DC-MongoDB-Users-Group/">Washington DC MongoDB Users Group</a>. You may find that this format works well for any technical user group.</p>

<p>We've experimented with a couple of different formats but I think we've settled into something that generally works for us. Some of these don't work with a meeting that's larger than 20 people; adjust accordingly.</p>

<!--more-->


<h3>Sign-in sheets</h3>

<p>I usually include a sign-in sheet for our meetings. The sheets usually include space for name, email address, twitter handle, and a space for the attendee to write in a question or topic they'd like to discuss when we have some an open discussion. Usually attendees are already on members on <a href="http://www.meetup.com/">Meetup.com</a> so it's easy enough to reach out to them but this provides another way to capture their contact info.</p>

<h3>Introductions and Announcements</h3>

<p>We start the meeting by going around the room and asking everyone to introduce themselves and share any announcements they may have. The announcements might be that they're hiring, looking for work, or something about an application or open source contribution they've made.</p>

<h3>Meeting content</h3>

<p>After the introductions, you get into the meat of the meeting. This can take on many different formats here are some that we've used successfully:</p>

<h4>Demos &amp; Tutorials</h4>

<p>Having someone demo a product or application that they've built always goes over well. In some instances, we've had people build applications on-the-fly to give attendees an idea of how easy it can be to work with <a href="http://www.mongodb.org/">MongoDB</a>.</p>

<h4>Lightning Talks</h4>

<p>4-6 attendees give 5-10 minute talks on a given subject related to MongoDB. This is a great way for the attendees to share something they're passionate about and practice their presentation skills.</p>

<h4>"Un-meeting"</h4>

<p>During an un-meeting, participants propose talks or discussion items and that drives the agenda for the meeting. I try to leave time for this sort of attendee-driven agenda in every meeting, even when we have scheduled presenters.</p>

<h4>Presentations</h4>

<p>It's great to line-up one or two speakers for the meeting. I think the best combination of speakers for a MongoDB meeting is to have one "intro" talk and one that is more advanced. We always seem to have a number of attendees who have done very little, if anything, with MongoDB prior to the meeting. Having an introductory presentation is great for them. The more advanced talk may get into replication, sharding, or production operations.</p>

<h3>Picks, tips, and #protips</h3>

<p>I stole this idea from the <a href="http://rubyrogues.com/">Ruby Rogues podcast</a>. At the end of each meeting we go around the room and ask each attendee to share a pick, tip, or #protip. These can be related to MongoDB but don't have to be. Heck, they don't need to be related to tech at all. Just something that the attendee has been using, doing, or has learned recently that he'd like to share with the group. Tips have included emacs and vi tips, command line tips, books, games, and even <a href="http://www.wikihow.com/Suppress-the-Gag-Reflex">tips on how to suppress the gag reflex</a>.</p>

<h3>Announce the next meetup</h3>

<p>It's key to announce the next meetup at the end of the current one. Minimally, you'll want to announce the date, time, and location. Preferably, you'll also be able to announce the theme of the night or the actual speakers.</p>

<h3>Other ideas</h3>

<p>Lately, I've been kicking around the idea of a book club meeting. The idea is that we'd pick a book, maybe <a href="http://www.manning.com/banker/">MongoDB in Action</a> and build a couple of the meeting agendas around chapters from the book. For example, perhaps we'd look at Part 1 Getting started in February, Part 2 - Application development in March, and Part 3 - MongoDB mastery in April. We may even be able to spend an entire meeting on the content and theme of a single chapter. The group could publish reviews of each section as they go. Have you had any experience with a user group that's done this?</p>

<p>We've also used Skype to bring experts in to present virtually. I've found that this works best when the presenter has a brief (15 minute) presentation and then is available for Q &amp; A.</p>

<p>For some more great suggestions, including suggestions on how to get great presenters, check out <a href="https://twitter.com/cwestin63">Chris Westin's</a> blog post - <a href="https://www.bookofbrilliantthings.com/blog/how-to-run-a-successful-tech-meetup">How to Run a Successful Tech Meetup</a>.</p>

<p>What suggestions do you have? Please leave a comment or get in touch with me.</p>

<p>Also, checkout my <a href="http://nathenharvey.com/blog/2011/12/13/tips-for-hosting-a-tech-user-group/">previous post</a> where I gave some <a href="http://nathenharvey.com/blog/2011/12/13/tips-for-hosting-a-tech-user-group/">ideas about how to run a successful user group meeting</a>.</p>
]]></content>
  </entry>
  
</feed>
